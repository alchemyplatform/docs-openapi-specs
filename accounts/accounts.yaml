openapi: 3.1.0
info:
  title: ðŸ‘¤ Embedded Accounts
  version: "1.0"
servers:
  - url: https://api.g.alchemy.com/signer/v1
security:
  - apiKey: []
paths:
  "/signup":
    post:
      summary: Create Account
      description: >
        Enables the creation of an Embedded Account using Alchemy Signer. It allows applications to authenticate users and facilitate signature operations on their behalf. An Embedded Account is either an on-chain Modular Account with Alchemy Signer as the owner, or a standalone EOA signer managed through Alchemy Signer.
      tags: ["Accounts API Endpoints"]
      security:
        - apiKey: [] # Maps the request to a specific project using the Alchemy API key.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  description: Optional. Used for user authentication when passkey is not provided. Specifies the user's email address.
                  required: false
                passkey:
                  type: object
                  description: Optional. Used for authentication when email is not provided. Enables passkey-based authentication.
                  required: false
                  properties:
                    challenge:
                      type: string
                      description: A challenge string for passkey authentication.
                    attestation:
                      type: object
                      description: Provides attestation details required for passkey authentication.
                      properties:
                        credentialId:
                          type: string
                          description: The credential ID used for attestation.
                        clientDataJson:
                          type: string
                          description: JSON data from the client used for attestation.
                        attestationObject:
                          type: string
                          description: The attestation object received during the authentication process.
                        transports:
                          type: array
                          description: Transport protocols used during attestation.
                          items:
                            type: string
                targetPublicKey:
                  $ref: "#/components/schemas/targetPublicKey"
                expirationSeconds:
                  $ref: "#/components/schemas/expirationSeconds"
      responses:
        "200":
          description: Account creation response.
          content:
            application/json:
              schema:
                type: object
                properties:
                  orgId:
                    $ref: "#/components/schemas/orgId"
      operationId: createAccount
  "/auth":
    post:
      summary: Send Auth Email
      description: >
        Sends a user an email containing a magic link or OTP for authentication, allowing them to complete the login process and access their Embedded Account through a secure, simple email verification method. Developers can customize the appearance and content of the authentication email through Alchemy dashboard to align with their application's branding and user experience requirements.
      tags: ["Accounts API Endpoints"]
      security:
        - apiKey: [] # Ensures the request is authenticated and mapped to a specific project using the Alchemy API key.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/email"
                  description: The email address of the user requesting access. This is where the authentication email, containing the magic link or OTP, will be sent.
                emailMode:
                  $ref: "#/components/schemas/emailMode"
                  description: Choice to send a magic link or an OTP to authenticate.
                targetPublicKey:
                  $ref: "#/components/schemas/targetPublicKey"
                expirationSeconds:
                  $ref: "#/components/schemas/expirationSeconds"
                  description: Optional. Specifies the duration in seconds for which the access request or authentication link remains valid. After this period, the request expires, necessitating a new authentication attempt.
      responses:
        "200":
          description: Authentication email sent successfully.
          content:
            application/json:
              schema:
                type: object
                properties:
                  orgId:
                    $ref: "#/components/schemas/orgId"
                    description: The organization ID associated with the user and the application, facilitating the authentication process within the context of the user's application.
      operationId: sendEmailAuth
  "/whoami":
    post:
      summary: Authenticate User
      description: >
        Authenticates a user and returns their identity and account information, enabling the application to grant the user access to their Embedded Account functionalities. This endpoint is used to confirm user authentication via email or passkey, thereby authorizing them to perform actions as the owner of a smart account or to conduct transactions as an EOA signer. It ensures that only authenticated users can access and manage their accounts.
      tags: ["Accounts API Endpoints"]
      security:
        - apiKey: [] # Ensures authentication and project-specific request mapping.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stampedRequest:
                  $ref: "#/components/schemas/SignedTurnkeyRequest"
      responses:
        "200":
          description: User authentication successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  email:
                    $ref: "#/components/schemas/email"
                    description: The authenticated user's email address.
                  userId:
                    type: string
                    description: A unique identifier for the authenticated user.
                  orgId:
                    $ref: "#/components/schemas/orgId"
                    description: The organization ID associated with the authenticated user's account.
                  address:
                    type: string
                    description: The blockchain address of the user's signer. Essential for executing transactions and managing the account.
      operationId: authUser
  "/lookup":
    post:
      summary: Get User
      description: >
        Enables applications to query the existence of a user account based on an email address.
      tags: ["Accounts API Endpoints"]
      security:
        - apiKey: [] # Ensures that the request is authenticated and mapped to a specific project.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  $ref: "#/components/schemas/email"
                  description: The email address of the user to look up. This is used to verify if an associated account exists within the system.
      responses:
        "200":
          description: Query successful. Returns organization ID if an account exists for the provided email address.
          content:
            application/json:
              schema:
                type: object
                properties:
                  orgId:
                    $ref: "#/components/schemas/orgId"
                    description: >
                      The organization ID associated with the user. This ID is returned if an account exists for the given email address. If no account is found, this value will be null. The response is intentionally limited to this information to protect user privacy and security.
      operationId: getUser
  "/sign-payload":
    post:
      summary: Sign Message
      description: >
        Allows for the signing of arbitrary payloads using the authenticated user's signer. The payload to be signed should be included within the body of a stamped request, ensuring the integrity and authenticity of the message to be signed. This operation is important for executing transactions and interactions on the blockchain that require verified signatures from the user's account.
      tags: ["Accounts API Endpoints"]
      security:
        - apiKey: [] # Secures the request and ensures it is mapped to a specific project.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stampedRequest:
                  $ref: "#/components/schemas/SignedTurnkeyRequest"
                  description: >
                    A stamped request that includes the payload to be signed. The payload is part of the stamped request's body, which should conform to the structure outlined in the Turnkey API documentation for signing raw payloads.
      responses:
        "200":
          description: Message signing successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  signature:
                    type: string
                    description: The signature generated for the specified payload.
      operationId: signMessage
  "/account/authenticator":
    post:
      summary: Register New Authenticator
      description: >
        Enables users to register a new authenticator with their account, supporting enhanced security and multi-device accessibility. Currently, this functionality supports adding a new passkey as an authenticator, facilitating secure login across different devices.
      tags: ["Accounts API Endpoints"]
      security:
        - apiKey: [] # Secures the request and ensures it is mapped to a specific project.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                stampedAddAuthenticatorRequest:
                  $ref: "#/components/schemas/SignedTurnkeyRequest"
                  description: >
                    A stamped request that specifies the details of the new authenticator to be registered. This ensures the integrity of the request and confirms the user's intent to add a new authentication method to their account.
      responses:
        "200":
          description: Authenticator registration successful.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "ok"
                    description: A confirmation message indicating the successful registration of the new authenticator.
      operationId: registerNewAuthenticator

components:
  securitySchemes:
    apiKey:
      type: apiKey
      name: Authorization
      in: header
      description: An API key that will be supplied in a named header.
      x-default: Bearer API_KEY
  schemas:
    apiKey:
      name: apiKey
      in: path
      schema:
        type: string
        default: docs-demo
        description: |
          <style>
            .custom-style {
              color: #048FF4;
            }
          </style>
          For higher throughput, <span class="custom-style"><a href="https://alchemy.com/?a=docs-demo" target="_blank">create your own API key</a></span>
      required: true
    email:
      name: email
      description: The email of the user that is signing in
      in: query
      schema:
        type: string
      required: true
    emailMode:
      name: emailMode
      description: Choose between magicLink and otp for authentication flow
      schema:
        type: string
      required: false
    expirationSeconds:
      name: expirationSeconds
      description: Optional. Specifies the duration of the login session in seconds. After this period, the user has to re-login to refresh their session. The default value is 900 seconds (15 minutes).
      schema:
        type: string
      required: false
    targetPublicKey:
      name: targetPublicKey
      description: The public key corresponding to the account, returned by the turnkey iframe integration. Allows the application to specify the public key mapping to the address of the created account.
      schema:
        type: string
      required: false
    orgId:
      name: orgId
      description: The organizational ID associated with the user and application, enabling the management of Embedded Accounts.
      schema:
        type: string
    SignedTurnkeyRequest:
      type: object
      description: >
        The signed request object containing session information. It is used to ensure the integrity and authenticity of requests to our API. For detailed steps on how to create a stamped request refer to the [Turnkey Stamps Documentation](https://docs.turnkey.com/api-design/stamps).
      required: true
      properties:
        url:
          type: string
          description: Generated by the turnkey client, but will be ignored on our end.
          required: true
        body:
          type: string
          description: JSON stringified request body.
          required: true
        stamp:
          type: object
          description: >
            A JSON-encoded object containing stamping information.
          required: true
          properties:
            stampHeaderName:
              type: string
              description: Header name of the approved authentication request.
              required: true
            stampHeaderValue:
              type: string
              description: Header value of the approved authentication request.
              required: true
