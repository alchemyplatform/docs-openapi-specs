# ========= EVM Methods ==============
eth_blockNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_blockNumber
eth_getBlockByHash:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getBlockByHash
        params:
          type: array
          description: |
            1. String - Hash of block
            2. Boolean - If `true` it returns the full transaction objects, if `false` only the hashes of the transactions. Defaults to `false`.
          minItems: 2
          maxItems: 2
          items:
            anyOf:
              - $ref: '#/blockHash_param'
              - title: Full transaction objects
                type: boolean
                default: false
          prefixItems:
            - $ref: '#/blockHash_param'
            - title: Full transaction objects
              type: boolean
              default: false

eth_getBlockByNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getBlockByNumber
        params:
          type: array
          description: |
            1. String - Either the hex value of a **block number** OR One of the following **block tags**:
                * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
                * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
                * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
                * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
                * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
            2. Boolean - If `true` it returns the full transaction objects, if `false` only the hashes of the transactions. Defaults to `false`.
          minItems: 2
          maxItems: 2
          items:
            anyOf:
              - $ref: '#/blockNumber_or_blocktag_param_eth'
                title: block number or block tag
              - title: Full transaction objects
                type: boolean
                default: false
          prefixItems:
            - $ref: '#/blockNumber_or_blocktag_param_eth'
              title: block number or block tag
            - title: Full transaction objects
              type: boolean
              default: false
eth_getBlockByNumber_l2:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getBlockByNumber
        params:
          type: array
          description: |
            1. String - Either the hex value of a **block number** OR One of the following **block tags**:
                * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
                * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
                * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
            2. Boolean - If `true` it returns the full transaction objects, if `false` only the hashes of the transactions. Defaults to `false`.
          minItems: 2
          maxItems: 2
          items:
            type: string
          default: ['latest', false]
eth_getLogs:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getLogs
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/filter_options'
eth_getTransactionByHash:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/transactionHash_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getTransactionByHash
eth_getTransactionReceipt:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/transactionHash_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getTransactionReceipt
eth_getBlockTransactionCountByHash:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getBlockTransactionCountByHash
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            - $ref: '#/blockHash_param'
eth_getBlockTransactionCountByNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getBlockTransactionCountByNumber
        params:
          type: array
          description: |
            String - Either the hex value of a **block number** OR **block tags**:
              1. **block number** (in hex) OR
              2. **block tag** (one of the following):
                * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
                * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
                * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
                * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
                * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
          default: finalized
          minItems: 1
          maxItems: 1
          items:
            anyOf:
              - type: string
                title: block number or block tag
                default: finalized
          prefixItems:
            - type: string
              title: block number or block tag
              default: finalized

eth_getTransactionCount:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/address_and_blockNumberOrTagOrHash_param_EIP1898'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getTransactionCount

eth_getTransactionByBlockHashAndIndex:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/blockHash_and_index_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getTransactionByBlockHashAndIndex

eth_getTransactionByBlockNumberAndIndex:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/blockNumber_and_index_param_eth'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getTransactionByBlockNumberAndIndex

eth_getTransactionByBlockNumberAndIndex_polygon_zkevm:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/blockNumber_and_index_param_polygon_zkevm'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getTransactionByBlockNumberAndIndex

eth_getBlockReceipts:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getBlockReceipts
        params:
          $ref: '#/blockNumber_or_blockHash_param_eth'

eth_sendRawTransaction:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/signed_transaction_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_sendRawTransaction
alchemy_getGasOptimizedTransactionStatus:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/get_signed_txns_status_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: alchemy_getGasOptimizedTransactionStatus
eth_sendPrivateTransaction:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_sendPrivateTransaction
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              tx:
                type: string
                description: 'Raw, signed transaction'
                default: '0x02f87205158459682f00850c51e9727a82520894477db63b8e73aea96f201c3c4f5e8fbfcdd18b5c87038d7ea4c6800080c080a0312d6375e578ab953a41456d4be583a46dced97a9e38f349bb8e7b63d14cfc1ea001daea40332180670568a1864e6d3f910b194903128d4a0a5c499597f3f6ff40'
              maxBlockNumber:
                type: string
                description: Hex-encoded number for highest block number in which the transaction should be included.
                default: '0x2540BE400'
              preferences:
                type: object
                properties:
                  fast:
                    type: boolean
                    description: Sends transaction with fast mode when true.
eth_cancelPrivateTransaction:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_cancelPrivateTransaction
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              txHash:
                type: string
                description: Transaction hash for private transaction to be cancelled.
eth_getBalance:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/address_and_blockNumberOrTagOrHash_param_EIP1898'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getBalance

eth_getBalance_polygon_zkevm:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/address_and_blockNumberOrTagOrHash_param_EIP1898_polygon_zkevm'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getBalance

eth_getStorageAt:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getStorageAt
        params:
          type: array
          description: |
            1. String - 20 Bytes - address of the storage
            2. String - Integer of the slot position in the storage (in hex)
            3. String - Either the hex value of a **block number** OR a **block hash** OR One of the following **block tags**:
              * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
              * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
              * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
              * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
              * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
          minItems: 3
          maxItems: 3
          items:
            type: string
          default:
            ['0x407d73d8a49eeb85d32cf465507dd71d507100c1', '0x0', 'latest']

eth_getStorageAt_polygon_zkevm:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getStorageAt
        params:
          type: array
          description: |
            1. String - 20 Bytes - address of the storage
            2. String - Integer of the slot position in the storage (in hex)
            3. String - Either the hex value of a **block number** OR a **block hash** OR One of the following **block tags**:
                * `pending` - This is the same as `latest` for Polygon zkEVM.
                * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
                * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
                * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
                * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
          minItems: 3
          maxItems: 3
          items:
            type: string
          default:
            ['0x407d73d8a49eeb85d32cf465507dd71d507100c1', '0x0', 'latest']

eth_getCode:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/address_and_blockNumberOrTagOrHash_param_EIP1898'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getCode

eth_getCode_polygon_zkevm:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/address_and_blockNumberOrTagOrHash_param_EIP1898_polygon_zkevm'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getCode

eth_accounts:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_accounts
eth_getProof:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getProof
        params:
          description: |
            1. String - 20 Bytes - Address of the account
            2. Array - 32 Bytes - array of storage-keys which should be proofed and included
            3. String - Either the hex value of a **block number** OR One of the following **block tags**:
              * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
              * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
              * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
              * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
              * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
          type: array
          minItems: 1
          maxItems: 1
          items:
            anyOf:
              - $ref: '#/AddressParam'
              - type: array
                title: Array of storage keys
                description: array of storage-keys which should be proofed and included
                items:
                  type: string
                default:
                  [
                    '0x742d35Cc6634C0532925a3b844Bc454e4438f44e',
                    '0x742d35Cc6634C0532925a3b844Bc454e4438f44f',
                  ]
              - $ref: '#/BlockNumberOrTagOrHash'
                title: Block Number or Block Hash or Block Tag
          prefixItems:
            - $ref: '#/AddressParam'
            - type: array
              title: Array of storage keys
              description: array of storage-keys which should be proofed and included
              items:
                type: string
              default:
                [
                  '0x742d35Cc6634C0532925a3b844Bc454e4438f44e',
                  '0x742d35Cc6634C0532925a3b844Bc454e4438f44f',
                ]
            - $ref: '#/BlockNumberOrTagOrHash'
              title: Block Number or Block Hash or Block Tag

eth_protocolVersion:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_protocolVersion
eth_gasPrice:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_gasPrice
eth_estimateGas_550:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_estimateGas
        params:
          type: array
          minItems: 2
          maxItems: 2
          items:
            oneOf:
              - allOf:
                  - $ref: '#/transaction_object'
                  - $ref: '#/gas_550'
              - $ref: '#/blockNumber_or_blocktag_param_eth'
          prefixItems:
            oneOf:
              - allOf:
                  - $ref: '#/transaction_object'
                  - $ref: '#/gas_550'
              - $ref: '#/blockNumber_or_blocktag_param_eth'

eth_estimateGas_polygon_zkEVM:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_estimateGas
        params:
          type: array
          minItems: 2
          maxItems: 2
          items:
            oneOf:
              - allOf:
                  - $ref: '#/transaction_object'
                  - $ref: '#/gas_550'
              - $ref: '#/blockNumber_or_blocktag_param_polygon_zkevm'
          prefixItems:
            oneOf:
              - allOf:
                  - $ref: '#/transaction_object'
                  - $ref: '#/gas_550'
              - $ref: '#/blockNumber_or_blocktag_param_polygon_zkevm'

eth_feeHistory:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_feeHistory
        params:
          type: array
          minItems: 3
          maxItems: 3
          description: |
            1. `integer` - Block count or range
            2. `string` - Block number (in hex) or block tag
            3. `array` of `integers` - (optional) Reward percentiles to sample from each block
          items:
            anyOf:
              - type: integer
                title: Block count
                description: Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query (may return less than requested range if not all blocks are available).
                default: 4
              - $ref: '#/blockNumber_or_blocktag_param_eth'
                title: Newest block
                description: highest number block in the requested range
                default: latest
              - type: array
                items:
                  type: number
                title: reward percentiles
                description: (optional) A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used.
                default: [25, 75]
          prefixItems:
            - type: integer
              title: Block count
              description: Number of blocks in the requested range. Between 1 and 1024 blocks can be requested in a single query (may return less than requested range if not all blocks are available).
              default: 4
            - $ref: '#/blockNumber_or_blocktag_param_eth'
              title: Newest block
              description: highest number block in the requested range
              default: latest
            - type: array
              items:
                type: number
              title: reward percentiles
              description: (optional) A monotonically increasing list of percentile values to sample from each block's effective priority fees per gas in ascending order, weighted by gas used.
              default: [25, 75]
eth_maxPriorityFeePerGas:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_maxPriorityFeePerGas
eth_chainId:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_chainId
net_version:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: net_version
net_listening:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: net_listening
eth_getUncleByBlockHashAndIndex:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/blockHash_uncleIndex_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getUncleByBlockHashAndIndex
eth_getUncleByBlockNumberAndIndex:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/blockNumber_uncleIndex_param_eth'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getUncleByBlockNumberAndIndex
eth_getUncleCountByBlockHash:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getUncleCountByBlockHash
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            - $ref: '#/blockHash_param'
eth_getUncleCountByBlockNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getUncleCountByBlockNumber
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/BlockNumber'
eth_getFilterChanges:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/filterId_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getFilterChanges
eth_getFilterLogs:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/filterId_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getFilterLogs
eth_newBlockFilter:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_newBlockFilter
eth_newFilter:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_newFilter
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            $ref: '#/filter_options'
eth_newPendingTransactionFilter:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_newPendingTransactionFilter
eth_uninstallFilter:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/filterId_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_uninstallFilter
web3_clientVersion:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: web3_clientVersion
web3_sha3:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/shaHash_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: web3_sha3
eth_getTransactionReceiptsByBlock:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/blockNumber_or_blockHash_param_l2'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getTransactionReceiptsByBlock
        params:
          type: array
          minItems: 1
          maxItems: 1
          description: block_number in hex OR block_hash.
          items:
            type: string
          default:
            [
              '0xb3e8c898cfbf4072eaad440e8606e578a33ca4fafc27d7936d83d7392ba3e939',
            ]
eth_syncing:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_syncing

# ============= Transaction Receipts API Method ===============
alchemy_getTransactionReceipts_param:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: alchemy_getTransactionReceipts
        params:
          type: array
          description: 'The api only takes in one parameter - an object with at least a blockNumber or blockHash. If both are provided, an error is returned asking you to choose either blockNumber or blockHash.'
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              blockNumber:
                type: string
                description: The block number you want to get transaction receipts for, in hex
                pattern: '^0[xX][0-9a-fA-F]+$'
                default: '0xF1D1C6'
              blockHash:
                type: string
                description: The block hash you want to get transaction receipts for
                pattern: '^0[xX][0-9a-fA-F]+$'
                # Did not use the blockHash_param component because it has a default value and we don't want that here, because this method only accepts either blockNumber or blockHash, not both and in this way we can also provide a better description.

# ============= Token API Methods ===============
alchemy_getTokenAllowance:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: alchemy_getTokenAllowance
        params:
          type: array
          description: null
          minItems: 1
          maxItems: 1
          items:
            type: object
            required:
              - contract
              - owner
              - spender
            properties:
              contract:
                type: string
                description: 'String - DATA, 20 Bytes - The address of the token contract.'
                default: '0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270'
              owner:
                type: string
                description: 'String - DATA, 20 Bytes - The address of the token owner.'
                default: '0xf1a726210550c306a9964b251cbcd3fa5ecb275d'
              spender:
                type: string
                description: 'String - DATA, 20 Bytes - The address of the token spender.'
                default: '0xdef1c0ded9bec7f1a1670819833240f027b25eff'
alchemy_getTokenBalances:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: alchemy_getTokenBalances
        params:
          type: array
          description: |
            1. String, 20 Bytes - The address to check token balances for.
            2. One of the following token specifications, defaults to `erc20`
                1. The String `erc20` - denotes the set of erc20 tokens that the address has ever held.
                2. Array - A list of contract addresses. Suggested limit: 100 addresses **[omitted below]**
                3. The String `DEFAULT_TOKENS` - denotes a query for the top 100 tokens by 24 hour volume - only available on Mainnet for Ethereum, Polygon, and Arbitrum. **[deprecated, please use `erc20` instead]**
            3. Options (optional) - An object that contains the following settings **[omitted below]**:
                1. `pageKey`: Applies only to the `erc20` request type. A string address used for pagination. If more results are available, a `pageKey` will be returned in the response.
                2. `maxCount`: Applies only to the `erc20` request type. Specifies the maximum count of token balances to return per call. This value defaults to 100 and is currently capped at 100.
          minItems: 1
          maxItems: 2
          items:
            type: string
          default: ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'erc20']

alchemy_getTokenMetadata:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: alchemy_getTokenMetadata
        params:
          type: array
          description: 'string, 20 Bytes - Singular address for the token contract.'
          minItems: 1
          maxItems: 1
          items:
            type: string
            default: '0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48'

# ============= Trace API Methods ===============

trace_call:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: trace_call
        params:
          type: array
          minItems: 1
          maxItems: 1
          description: |
            1. `object` - Transaction Object (select in 1st box)
            2. `string` - Type of trace, one or more of "trace" or "stateDiff". (select in 2nd box)
            3. `string` - Block Identifier: Block hash, block number (in hex), or block tag (select in 3rd box)
          items:
            anyOf:
              - $ref: '#/transaction_object'
                title: Transaction Object
                description: transaction object.
              - $ref: '#/trace_type_array'
              - $ref: '#/blockNumber_or_blocktag_param_eth'
                title: Block number or block tag
          prefixItems:
            - $ref: '#/transaction_object'
              title: Transaction Object
              description: transaction object.
            - $ref: '#/trace_type_array'
            - $ref: '#/blockNumber_or_blocktag_param_eth'
              title: Block number or block tag
trace_rawTransaction:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: trace_rawTransaction
        params:
          type: array
          minItems: 1
          maxItems: 1
          description: |
            1. `string` - Raw transaction data
            2. `array` - Type of trace, one or more of "trace" or "stateDiff"
          items:
            anyOf:
              - type: string
                title: raw transaction
                description: Raw transaction data.
                default: '0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675'
              - $ref: '#/trace_type_array'
          prefixItems:
            - type: string
              title: raw transaction
              description: Raw transaction data.
              default: '0xd46e8dd67c5d32be8d46e8dd67c5d32be8058bb8eb970870f072445675058bb8eb970870f072445675'
            - $ref: '#/trace_type_array'
trace_replayBlockTransactions:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: trace_replayBlockTransactions
        params:
          type: array
          minItems: 1
          maxItems: 1
          description: |
            1. `string` - Block Identifier: Block hash, block number (in hex), or block tag
            2. `array` - Type of trace, one or more of "trace" or "stateDiff"
          items:
            oneOf:
              - $ref: '#/blockNumber_or_blocktag_param_eth'
                title: block number or block tag
              - $ref: '#/trace_type_array'
          prefixItems:
            oneOf:
              - $ref: '#/blockNumber_or_blocktag_param_eth'
                title: block number or block tag
              - $ref: '#/trace_type_array'
trace_replayTransaction:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: trace_replayTransaction
        params:
          type: array
          minItems: 1
          maxItems: 1
          description: |
            1. `string` - transaction hash
            2. `array` - Type of trace, one or more of "trace" or "stateDiff"
          items:
            oneOf:
              - type: string
                title: Transaction hash
                default: '0x8fc90a6c3ee3001cdcbbb685b4fbe67b1fa2bec575b15b0395fea5540d0901ae'
                pattern: '^0[xX][0-9a-fA-F]+$'
              - $ref: '#/trace_type_array'
          prefixItems:
            oneOf:
              - type: string
                title: Transaction hash
                default: '0x8fc90a6c3ee3001cdcbbb685b4fbe67b1fa2bec575b15b0395fea5540d0901ae'
                pattern: '^0[xX][0-9a-fA-F]+$'
              - $ref: '#/trace_type_array'

trace_block:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: trace_block
        params:
          type: array
          minItems: 1
          maxItems: 1
          description: |
            Array of HEX String.
            </br>The following options are possible for the defaultBlock parameter.
            - An integer block number (in hex)
            - String 'earliest' for the earliest/genesis block. String 'latest' - for the latest mined block. String 'pending' - for the pending state/transactions.
          items:
            $ref: '#/blockNumber_or_blocktag_param_eth'
          default: ['latest']
trace_filter:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: trace_filter
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              fromBlock:
                type: string
                description: From this block
                default: '0xc26f54'
                pattern: '^0[xX][0-9a-fA-F]+$'
              toBlock:
                type: string
                description: To this block
                default: '0xc26f54'
                pattern: '^0[xX][0-9a-fA-F]+$'
              fromAddress:
                type: string
                description: Sent from these addresses.
                pattern: '^0[xX][0-9a-fA-F]+$'
              toAddress:
                type: string
                description: Sent to these addresses.
                pattern: '^0[xX][0-9a-fA-F]+$'
                default: '0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5'
              after:
                type: string
                description: The offset trace number.
              count:
                type: integer
                description: Integer number of traces to display in a batch.

trace_get:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: trace_get
        params:
          type: array
          description: |
            1. `string` - transaction hash
            2. `array` - index position of traces to get, in hex
          minItems: 1
          maxItems: 1
          items:
            anyOf:
              - type: string
                title: Transaction hash
                default: '0x8fc90a6c3ee3001cdcbbb685b4fbe67b1fa2bec575b15b0395fea5540d0901ae'
                pattern: '^0[xX][0-9a-fA-F]+$'
              - type: array
                title: index position of trace
                description: Array - Index positions of the traces, in hex
                items:
                  type: string
                  pattern: '^0[xX][0-9a-fA-F]+$'
                default: ['0x0']
          prefixItems:
            - type: string
              title: Transaction hash
              default: '0x8fc90a6c3ee3001cdcbbb685b4fbe67b1fa2bec575b15b0395fea5540d0901ae'
              pattern: '^0[xX][0-9a-fA-F]+$'
            - type: array
              title: index position of trace
              description: Array - Index positions of the traces, in hex
              items:
                type: string
                pattern: '^0[xX][0-9a-fA-F]+$'
              default: ['0x0']

trace_transaction:
  allOf:
    - $ref: '#/common_request_fields'
    - $ref: '#/transactionHash_param'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: trace_transaction

# ============= Polygon API Methods ===============
bor_getAuthor:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: bor_getAuthor
        params:
          description: Array of block number (in hexadecimal format).
          type: array
          items:
            type: string
          default: ['0x1']
bor_getCurrentValidators:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: bor_getCurrentValidators
bor_getCurrentProposer:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: bor_getCurrentProposer
bor_getRootHash:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: bor_getRootHash
        params:
          type: array
          items:
            type: object
            properties:
              from:
                type: integer
                description: Block number (in int format).
                default: 0
              to:
                type: integer
                description: Block number (in int format).
                default: 100

bor_getSignersAtHash:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: bor_getSignersAtHash
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              blockHash:
                type: string
                description: Block hash (in hexadecimal format).
                default: '0x1890044c3e2cbd530f0a9a6d0d77f238866d725ddd801d34fa42c5e062fc7d62'
                pattern: '^0[xX][0-9a-fA-F]+$'

eth_getRootHash:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getRootHash
        params:
          type: array
          items:
            type: object
            properties:
              from:
                type: integer
                description: Block number (in int format).
                default: 0
              to:
                type: integer
                description: Block number (in int format).
                default: 100
eth_getSignersAtHash:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getSignersAtHash
        params:
          type: array
          minItems: 1
          maxItems: 1
          description: Blockhash.
          items:
            type: string
          default:
            [
              '0x4dc1217672d9dd8215be5f1461f8d139cbe0dd871a38c3fa90a3ef248d94cac2',
            ]

# ============= Arbitrum API Methods ===============
eth_createAccessList:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_createAccessList
        params:
          type: array
          description: |
            1. Transaction Object
            2. Blog number or block tag
          minItems: 1
          maxItems: 2
          items:
            anyOf:
              - $ref: '#/transaction_object'
                title: Transaction object
              - $ref: '#/blockNumber_or_blocktag_param_l2'
                title: Block number or block tag
                default: pending
          prefixItems:
            - $ref: '#/transaction_object'
              title: Transaction object
            - $ref: '#/blockNumber_or_blocktag_param_l2'
              title: Block number or block tag
              default: pending

# ============= Transfers API Methods ===============
alchemy_getAssetTransfers:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: alchemy_getAssetTransfers
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            type: object
            required:
              - category
            properties:
              fromBlock:
                type: string
                description: 'String - Inclusive from block (hex string, int, `latest`, or `indexed`). Defaults to `0x0`'
                default: '0x0'
              toBlock:
                type: string
                description: 'String - Inclusive to block (hex string, int, `latest`, or `indexed`). Defaults to `latest`. Read more about block tags <span class="custom-style"><a href="https://docs.alchemy.com/reference/transfers-api-quickstart#what-are-the-different-types-of-block-tags" target="_blank">here</a></span>'
                default: latest
              fromAddress:
                type: string
                description: String - From address (hex string). Default wildcard - any address
                pattern: '^0[xX][0-9a-fA-F]+$'
              toAddress:
                type: string
                description: String - To address (hex string). Default wildcard - any address
                pattern: '^0[xX][0-9a-fA-F]+$'
                default: '0x5c43B1eD97e52d009611D89b74fA829FE4ac56b1'
              contractAddresses:
                type: array
                description: 'String - List of contract addresses (hex strings) to filter for - only applies to "erc20", "erc721", "erc1155" transfers. Default wildcard - any address'
                items:
                  type: string
                  pattern: '^0[xX][0-9a-fA-F]+$'
              category:
                type: array
                description: |
                  'Array of categories, can be any of the following: "external", "internal", "erc20", "erc721", "erc1155", or "specialnft". See the table above for supported categories on each network.'
                items:
                  type: string
                  enum:
                    - external
                    - internal
                    - erc20
                    - erc721
                    - erc1155
                    - specialnft
                default: ['external']
              order:
                type: string
                description: |
                  String - Whether to return results in ascending (`asc`) or descending (`desc`) order. Ascending order is from oldest to newest transactions, descending order is from newest to oldest. Defaults to `asc`.
                enum:
                  - asc
                  - desc
              withMetadata:
                type: boolean
                description: Boolean - Whether or not to include additional metadata about each transfer event. Defaults to `false`.
                default: false
              excludeZeroValue:
                type: boolean
                description: Boolean - A boolean to exclude transfers with zero value - zero value is not the same as null value. Defaults to `true`.
                default: true
              maxCount:
                type: string
                description: Max hex string number of results to return per call. Defaults to `0x3e8` (1000).
                default: '0x3e8'
              pageKey:
                type: string
                description: 'String - UUID for pagination. If more results are available, a uuid pageKey will be returned in the response. Pass that uuid into pageKey to fetch the next 1000 or maxCount.'

# ============= Debug API Methods ===============
tracer:
  type: string
  default: callTracer
  enum:
    - callTracer
    - prestateTracer
tracerConfig:
  type: object
  properties:
    onlyTopCall:
      type: boolean

debug_traceCall:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: debug_traceCall
        params:
          type: array
          minItems: 1
          maxItems: 1
          description: |
            1. `object` - Transaction Object
            2. `string` - Block Identifier: Block hash, block number (in hex), or block tag
            3. `tracer` - Object: Currently supports `callTracer` and `prestateTracer` (see above for definitions).
          items:
            anyOf:
              - $ref: '#/transaction_object'
                title: Transaction object
              - type: string
                title: Block identifier
                description: |
                  String - One of the following options:
                    1. **block hash**
                    2. **block number** (in hex)
                    3. **block tag** (one of the following):
                      * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
                      * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
                      * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
                      * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
                      * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
                default: finalized
              - type: object
                title: Tracer
                properties:
                  tracer:
                    $ref: '#/tracer'
                  tracerConfig:
                    $ref: '#/tracerConfig'
            prefixItems:
              - $ref: '#/transaction_object'
                title: Transaction object
              - type: string
                title: Block identifier
                description: |
                  String - One of the following options:
                    1. **block hash**
                    2. **block number** (in hex)
                    3. **block tag** (one of the following):
                      * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
                      * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
                      * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
                      * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
                      * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
                default: finalized
              - type: object
                title: Tracer
                properties:
                  tracer:
                    $ref: '#/tracer'
                  tracerConfig:
                    $ref: '#/tracerConfig'

debug_traceBlockByHash:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: debug_traceBlockByHash
        params:
          type: array
          description: |
            1. `string` - Block hash for the block to be traced
            2. `tracer` Object - Currently supports `callTracer` and `prestateTracer` (see above for definitions).
          minItems: 1
          maxItems: 1
          items:
            anyOf:
              - type: string
                title: Block hash
                description: block hash
                default: '0x7bd8357213af34d3fe7f725d9b21187a5a58127e39aac5776fd0594e3391ea6e'
              - type: object
                title: Tracer
                properties:
                  tracer:
                    $ref: '#/tracer'
                  tracerConfig:
                    $ref: '#/tracerConfig'
          prefixItems:
            - type: string
              title: Block hash
              description: block hash
              default: '0x7bd8357213af34d3fe7f725d9b21187a5a58127e39aac5776fd0594e3391ea6e'
            - type: object
              title: Tracer
              properties:
                tracer:
                  $ref: '#/tracer'
                tracerConfig:
                  $ref: '#/tracerConfig'
debug_traceBlockByNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: debug_traceBlockByNumber
        params:
          type: array
          description: |
            1. String - Block number (in hex) or block tag
            2. `tracer` Object - Currently supports `callTracer` and `prestateTracer` (see above for definitions).
          minItems: 1
          maxItems: 1
          items:
            anyOf:
              - $ref: '#/blockNumber_or_blocktag_param_eth'
                title: Block Number or Block Tag
              - type: object
                title: tracer
                properties:
                  tracer:
                    $ref: '#/tracer'
                  tracerConfig:
                    $ref: '#/tracerConfig'
          prefixItems:
            - $ref: '#/blockNumber_or_blocktag_param_eth'
              title: Block Number or Block Tag
            - type: object
              title: tracer
              properties:
                tracer:
                  $ref: '#/tracer'
                tracerConfig:
                  $ref: '#/tracerConfig'
debug_traceTransaction:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: debug_traceTransaction
        params:
          type: array
          minItems: 1
          maxItems: 1
          description: |
            1. String - Transaction hash
            2. Object - options for call, can be any of the following options:
              - `tracer`: Object - Currently supports `callTracer` and `prestateTracer` (see above for definitions).
              - `timeout`: String - A duration string of decimal numbers that overrides the default timeout of 5 seconds for JavaScript-based tracing calls. Max timeout is "10s". Valid time units are "ns", "us", "ms", "s" each with optional fraction, such as "300ms" or "2s45ms".
          items:
            anyOf:
              - $ref: '#/transactionHash_param'
              - type: object
                description: options for call
                title: Options
                properties:
                  tracer:
                    $ref: '#/tracer'
                  tracerConfig:
                    $ref: '#/tracerConfig'
                  timeout:
                    type: string
                    description: A duration string of decimal numbers that overrides the default timeout of 5 seconds for JavaScript-based tracing calls. Max timeout is "10s". Valid time units are "ns", "us", "ms", "s" each with optional fraction, such as "300ms" or "2s45ms".
                    default: 5s
          prefixItems:
            - $ref: '#/transactionHash_param'
            - type: object
              description: options for call
              title: Options
              properties:
                tracer:
                  $ref: '#/tracer'
                tracerConfig:
                  $ref: '#/tracerConfig'
                timeout:
                  type: string
                  description: A duration string of decimal numbers that overrides the default timeout of 5 seconds for JavaScript-based tracing calls. Max timeout is "10s". Valid time units are "ns", "us", "ms", "s" each with optional fraction, such as "300ms" or "2s45ms".
                  default: 5s

# ============ EVM Models ==============
common_request_fields:
  type: object
  properties:
    id:
      $ref: ./components/schemas.yaml#/Id
    jsonrpc:
      $ref: ./components/schemas.yaml#/JsonRpc
filter_options:
  type: object
  properties:
    blockHash:
      type: string
      pattern: '^0[xX][0-9a-fA-F]+$'
      description: 'Using blockHash is equivalent to fromBlock = toBlock = the block number with hash blockHash. If blockHash is present in the filter criteria, then neither fromBlock nor toBlock are allowed.'
    address:
      type: array
      items:
        type: string
      description: Contract address or a list of addresses from which logs should originate.
      default: ['0xb59f67a8bff5d8cd03f6ac17265c550ed8f33907']
    fromBlock:
      $ref: '#/blockNumber_or_blocktag_param_eth'
      default: '0x429d3b'
    toBlock:
      $ref: '#/blockNumber_or_blocktag_param_eth'
      default: latest
    topics:
      $ref: '#/topics'
topics:
  type: array
  description: Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with "or" options.
  items:
    type: string
  default:
    [
      '0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef',
      '0x00000000000000000000000000b46c2526e227482e2ebb8f4c69e4674d262e75',
      '0x00000000000000000000000054a2d42a40f51259dedd1978f6c118a0f0eff078',
    ]

eth_call_550_gas:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_call
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            oneOf:
              - allOf:
                  - $ref: '#/transaction_object'
                    title: Transaction Object
                  - $ref: '#/gas_550'
              - $ref: '#/BlockNumberOrTagOrHash'
                title: Block number or block tag or block hash
          prefixItems:
            oneOf:
              - allOf:
                  - $ref: '#/transaction_object'
                    title: Transaction Object
                  - $ref: '#/gas_550'
              - $ref: '#/BlockNumberOrTagOrHash'
                title: Block number or block tag or block hash

eth_call_polygon_zkevm:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_call
        params:
          type: array
          minItems: 1
          maxItems: 1
          items:
            oneOf:
              - allOf:
                  - $ref: '#/transaction_object'
                    title: Transaction Object
                  - $ref: '#/gas_550'
              - $ref: '#/BlockNumberOrTagOrHash_polygon_zkevm'
                title: Block number or block tag or block hash
          prefixItems:
            oneOf:
              - allOf:
                  - $ref: '#/transaction_object'
                    title: Transaction Object
                  - $ref: '#/gas_550'
              - $ref: '#/BlockNumberOrTagOrHash_polygon_zkevm'
                title: Block number or block tag or block hash

transaction_object:
  type: object
  description: The transaction call object
  properties:
    from:
      type: string
      description: 20 Bytes - The address the transaction is sent from.
      pattern: '^0[xX][0-9a-fA-F]+$'
    to:
      type: string
      description: 20 Bytes - The address the transaction is directed to
      default: '0xd46e8dd67c5d32be8058bb8eb970870f07244567'
      pattern: '^0[xX][0-9a-fA-F]+$'
    gas:
      type: string
      description: Integer of the gas provided for the transaction execution.
      pattern: '^0[xX][0-9a-fA-F]+$'
      default: '0x00'
    gasPrice:
      type: string
      description: |
        Integer of the gasPrice used for each paid gas.
        <br/><strong>NOTE:</strong> most of our users <b>(95%+)</b> never set the gasPrice on eth_call.
      pattern: '^0[xX][0-9a-fA-F]+$'
      default: '0x09184e72a000'
    value:
      type: string
      description: Integer of the value sent with this transaction
      pattern: '^0[xX][0-9a-fA-F]+$'
      default: '0x00'
    data:
      type: string
      description: Hash of the method signature and encoded parameters
      pattern: '^0[xX][0-9a-fA-F]+$'
      default: '0x'
  required:
    - to
gas_550:
  type: object
  properties:
    gas:
      type: string
      pattern: '^0[xX][0-9a-fA-F]+$'
      default: '0x1C9C380'
      description: |
        Integer of the gas provided for the transaction execution. eth_call consumes zero gas, but this parameter may be needed by some executions.
        </br><strong> NOTE: </strong>this parameter has a cap of <b>550</b> Million gas per request. Reach out to us at support@alchemy.com if you want to increase this limit!
transactionHash_param:
  type: object
  properties:
    params:
      type: array
      description: String - 32 Bytes - Hash of a transaction
      minItems: 1
      maxItems: 1
      items:
        type: string
        pattern: '^0[xX][0-9a-fA-F]+$'
        default: '0x8fc90a6c3ee3001cdcbbb685b4fbe67b1fa2bec575b15b0395fea5540d0901ae'
blockHash_param:
  type: string
  description: String - 32 Bytes - Hash of a block
  title: block hash
  pattern: '^0[xX][0-9a-fA-F]+$'
  default: '0x63392b0dbab8cecbf16a8174f6ee7c2fd58a01d1f9bd5599aa422d0c782908d5'
blockHash_and_index_param:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - 32 Bytes - Hash of a block
        2. String - Integer of the transaction index position (in hex).
      minItems: 2
      maxItems: 2
      items:
        type: string
        pattern: '^0[xX][0-9a-fA-F]+$'
      default:
        [
          '0xbf06c77f6ed9a65441795eb8c2ccd694b3fc9b4d1be6066bf7ed52c73c5ec97c',
          '0x64',
        ]
signed_transaction_param:
  type: object
  properties:
    params:
      type: array
      description: String - The signed transaction data.
      minItems: 1
      maxItems: 1
      items:
        type: string
        pattern: '^0[xX][0-9a-fA-F]+$'
      default:
        [
          '0xf86d808504a817c800825208943535353535353535353535353535353535353535880de0b6b3a7640000801ca0e0d2e3f3d8de8a0c9f25d0b02c7a8a91e7e1c818e6f37a49d8b04f9a9a96a1a0620a6c8d95e0f289bfbf2b3d3e476de6b9bc6d0e974c06f1e4de5be7c5ef0e10',
        ]
get_signed_txns_status_param:
  type: object
  properties:
    params:
      type: array
      description: String - The `transactionId` returned from `alchemy_sendGasOptimizedTransactions`
      minItems: 1
      maxItems: 1
      items:
        type: string
        default: '0x000C'
bundled_signed_transaction_param:
  type: object
  properties:
    method:
      $ref: ./components/schemas.yaml#/Method
      default: alchemy_sendGasOptimizedTransaction
    params:
      type: array
      minItems: 1
      maxItems: 1
      items:
        $ref: '#/bundle_options'
bundle_options:
  type: object
  properties:
    rawTransactions:
      type: array
      minItems: 1
      maxItems: 20
      items:
        type: string
      description: Array - The bundle of signed transactions
blockHash_uncleIndex_param:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - 32 Bytes - Hash of a block
        2. String - The uncle''s index position (in hex)
      minItems: 2
      maxItems: 2
      items:
        type: string
        pattern: '^0[xX][0-9a-fA-F]+$'
      default:
        [
          '0xb3e8c898cfbf4072eaad440e8606e578a33ca4fafc27d7936d83d7392ba3e939',
          '0x0',
        ]
filterId_param:
  type: object
  properties:
    params:
      type: array
      description: String - The filter id.
      minItems: 1
      maxItems: 1
      items:
        type: string
      default: ['0x1']
shaHash_param:
  type: object
  properties:
    params:
      type: array
      description: String - The data in hex form to convert into a SHA3 hash.
      minItems: 1
      maxItems: 1
      items:
        type: string
        pattern: '^0[xX][0-9a-fA-F]+$'
      default: ['0x68656c6c6f20776f726c64']
trace_type_array:
  type: array
  description: 'Type of trace, one or more of "trace" or "stateDiff".'
  title: Type of Trace ("trace" or "statediff")
  items:
    type: string
    enum:
      - trace
      - stateDiff
  default: ['trace']

# ======= Definitions for blockNumber methods ==========
# After the merge, Ethereum offers more block tags than other EVM chains so we separated them out

blockNumber_or_blocktag_param_eth:
  type: string
  description: |
    String - Either the hex value of a **block number** OR **block tags**:
      1. **block number** (in hex) OR
      2. **block tag** (one of the following):
        * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
        * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
        * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
        * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
        * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
  default: finalized

blockNumber_or_blocktag_param_polygon_zkevm:
  type: string
  description: |
    String - Either the hex value of a **block number** OR **block tags**:
      1. **block number** (in hex) OR
      2. **block tag** (one of the following):
          * `pending` - This is the same as `latest` for Polygon zkEVM.
          * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
          * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
          * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
          * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
  default: finalized

blockNumber_or_blocktag_param_l2:
  type: string
  description: |
    String - Either the hex value of a **block number** OR One of the following **block tags**:
      * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
      * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
      * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
  default: latest
address_and_blockNumber_param_eth:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - 20 Bytes - Address
        2. String - Either the hex value of a **block number** OR One of the following **block tags**:
            * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
            * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
            * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
      minItems: 2
      maxItems: 2
      items:
        type: string
      default: ['0x95222290DD7278Aa3Ddd389Cc1E1d165CC4BAfe5', 'latest']

address_and_blockNumberOrTagOrHash_param_EIP1898:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - 20 Bytes - Address
        2. String - Either the hex value of a **block number** OR a **block hash** OR One of the following **block tags**:
            * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
      minItems: 2
      maxItems: 2
      items:
        type: string
      default: ['0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8', 'latest']

address_and_blockNumberOrTagOrHash_param_EIP1898_polygon_zkevm:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - 20 Bytes - Address
        2. String - Either the hex value of a **block number** OR a **block hash** OR One of the following **block tags**:
            * `pending` - This is the same as `latest` for Polygon zkEVM.
            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
      minItems: 2
      maxItems: 2
      items:
        type: string
      default: ['0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8', 'latest']

BlockNumberOrTagOrHash:
  title: Block number or tag, or block hash
  oneOf:
    - title: Block Number
      $ref: '#/BlockNumber'
    - title: Block Tag
      $ref: '#/BlockTag'
    - title: Block Hash
      $ref: '#/BlockHashEIP1898'

BlockNumberOrTagOrHash_polygon_zkevm:
  title: Block number or tag, or block hash
  oneOf:
    - title: Block Number
      $ref: '#/BlockNumber'
    - title: Block Tag
      $ref: '#/BlockTag_polygon_zkevm'
    - title: Block Hash
      $ref: '#/BlockHashEIP1898'

AddressParam:
  title: Address
  type: string
  description: 20 Bytes - Address
  pattern: '^0[xX][0-9a-fA-F]{40}$'
  default: '0xe5cB067E90D5Cd1F8052B83562Ae670bA4A211a8'

BlockTag:
  title: Block tag
  type: string
  description: |
    One of the following **block tags**:
      * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
      * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
      * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
  enum:
    - pending
    - latest
    - earliest
  default: latest

BlockTag_polygon_zkevm:
  title: Block tag
  type: string
  description: |
    One of the following **block tags**:
      * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
      * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
  enum:
    - latest
    - earliest
  default: latest

BlockNumber:
  title: Block number
  type: string
  description: The hex value of a **block number**.
  default: '0x61A80'

BlockHashEIP1898:
  title: Block hash
  type: object
  required:
    - blockHash
  properties:
    blockHash:
      $ref: '#/blockHash_param'
    requireCanonical:
      title: Require canonical
      type: boolean
      default: false

address_and_blockNumber_param_l2:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - 20 Bytes - Address
        2. String - Either the hex value of a **block number** OR One of the following **block tags**:
            * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
      minItems: 2
      maxItems: 2
      items:
        type: string
blockNumber_and_index_param_eth:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - either the hex value of a **block number** OR One of the following **block tags**:
            * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
            * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
            * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
        2. String - The transaction index position (in hex)
      minItems: 2
      maxItems: 2
      items:
        type: string

blockNumber_and_index_param_polygon_zkevm:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - either the hex value of a **block number** OR One of the following **block tags**:
            * `pending` - This is the same as `latest` for Polygon zkEVM.
            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
            * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
            * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
        2. String - The transaction index position (in hex)
      minItems: 2
      maxItems: 2
      items:
        type: string

blockNumber_and_index_param_eth_l2:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - either the hex value of a **block number** OR One of the following **block tags**:
            * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
        2. String - The transaction index position (in hex)
      minItems: 2
      maxItems: 2
      items:
        type: string
blockNumber_or_blockHash_param_eth:
  type: string
  description: |
    String - One of the following options:
      1. **block hash**
      2. **block number** (in hex)
      3. **block tag** (one of the following):
        * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
        * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
        * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
        * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
        * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
  minItems: 1
  maxItems: 1
  items:
    type: string
  default: 'latest'
blockNumber_or_blockHash_param_l2:
  type: object
  properties:
    params:
      type: array
      description: |
        String - One of the following options:
          1. **block hash**
          2. **block number** (in hex)
          3. **block tag** (one of the following):
              * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
              * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
              * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
      minItems: 1
      maxItems: 1
      items:
        type: string
      default: ['latest']

blockNumber_uncleIndex_param_eth:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - either the hex value of a **block number** OR One of the following **block tags**:
            * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
            * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
            * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
        2. String - The uncle's index position (in hex)
      minItems: 2
      maxItems: 2
      items:
        type: string
      default: ['latest', '0x0']
blockNumber_uncleIndex_param_l2:
  type: object
  properties:
    params:
      type: array
      description: |
        1. String - either the hex value of a **block number** OR One of the following **block tags**:
            * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
        2. String - The uncle''s index position (in hex)
      minItems: 2
      maxItems: 2
      items:
        type: string
      default: ['latest', '0x0']

# ======= zkEVM Methods =======

zkevm_consolidatedBlockNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: zkevm_consolidatedBlockNumber

zkevm_isBlockVirtualized:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: zkevm_isBlockVirtualized
        params:
          type: array
          description: |
            1. String - The block number (in hex)
          minItems: 1
          maxItems: 1
          items:
            type: string
            pattern: '^0x[0-9a-fA-F]+$'
          default: ['0x0']

zkevm_isBlockConsolidated:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: zkevm_isBlockConsolidated
        params:
          type: array
          description: |
            1. String - The block number (in hex)
          minItems: 1
          maxItems: 1
          items:
            type: string
            pattern: '^0x[0-9a-fA-F]+$'
          default: ['0x0']

zkevm_batchNumberByBlockNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: zkevm_batchNumberByBlockNumber
        params:
          type: array
          description: |
            1. String - The block number (in hex)
          minItems: 1
          maxItems: 1
          items:
            type: string
            pattern: '^0x[0-9a-fA-F]+$'
          default: ['0x0']

zkevm_batchNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: zkevm_batchNumber

zkevm_virtualBatchNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: zkevm_virtualBatchNumber

zkevm_verifiedBatchNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: zkevm_verifiedBatchNumber

zkevm_getBatchByNumber:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: zkevm_getBatchByNumber
        params:
          type: array
          description: |
            1. String - The batch number (in hex) or batch tag

              The optional batch height descriptions are:
              * `latest` - The most recent batch in the canonical chain observed by the client, this batch may be re-orged out of the canonical chain even under healthy/normal conditions.
              * `earliest` - The lowest numbered batch the client has available. Intuitively, you can think of this as the first batch created.
          minItems: 1
          maxItems: 1
          items:
            type: string
          default: ['0x0']

zkevm_getBroadcastURI:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: zkevm_getBroadcastURI

# ===================== Account Abstraction Methods =====================

eth_sendUserOperation:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_sendUserOperation
        params:
          type: array
          description: |
            1. Object - The `UserOperation` object
            2. String - The `entrypoint` address the request should be sent through. This MUST be one of the entry points returned by the supportedEntryPoints rpc call.

            **NOTE:** You'll see two of each parameters below, this has to do with OpenAPI formatting. To test the request, please fill in the **User Operation** field in the first box and the **Entrypoint Address** in the second box.
          minItems: 2
          maxItems: 2
          items:
            oneOf:
              - $ref: ./components/schemas.yaml#/UserOperation
              - $ref: ./components/schemas.yaml#/EntryPoint
          prefixItems:
            oneOf:
              - $ref: ./components/schemas.yaml#/UserOperation
              - $ref: ./components/schemas.yaml#/EntryPoint

eth_estimateUserOperationGas:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_estimateUserOperationGas
        params:
          type: array
          description: |
            1. Object - The `UserOperation` object (gas limits and prices are optional)
            2. String - The `entrypoint` address the request should be sent through. This MUST be one of the entry points returned by the supportedEntryPoints rpc call.

            **NOTE:** You'll see two of each parameters below, this has to do with OpenAPI formatting. To test the request, please fill in the **User Operation** field in the first box and the **Entrypoint Address** in the second box.
          minItems: 2
          maxItems: 2
          items:
            oneOf:
              - $ref: ./components/schemas.yaml#/UserOperation
              - $ref: ./components/schemas.yaml#/EntryPoint
          prefixItems:
            oneOf:
              - $ref: ./components/schemas.yaml#/UserOperation
              - $ref: ./components/schemas.yaml#/EntryPoint

eth_getUserOperationByHash:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getUserOperationByHash
        params:
          type: array
          description: The `userOpHash` of the UserOperation to get (as returned by `eth_sendUserOperation`)
          minItems: 1
          maxItems: 1
          items:
            type: string
            description: The `userOpHash` of the UserOperation
            default: '0x77c0b560eb0b042902abc5613f768d2a6b2d67481247e9663bf4d68dec0ca122'

eth_getUserOperationReceipt:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_getUserOperationReceipt
        params:
          type: array
          description: The `userOpHash` of the UserOperation to get the receipt for (as returned by `eth_sendUserOperation`)
          minItems: 1
          maxItems: 1
          items:
            type: string
            description: The `userOpHash` of the UserOperation to get the receipt for
            default: '0x93c06f3f5909cc2b192713ed9bf93e3e1fde4b22fcd2466304fa404f9b80ff90'

eth_supportedEntryPoints:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: eth_supportedEntryPoints

alchemy_requestPaymasterAndData:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: alchemy_requestPaymasterAndData
        params:
          type: array
          description: Parameters for requesting coverage
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              policyId:
                type: string
                description: The policy ID
                default: '0x1234567890123456789012345678901234567890123456789012345678901234'
              entryPoint:
                $ref: ./components/schemas.yaml#/EntryPoint
              userOperation:
                $ref: ./components/schemas.yaml#/UserOperationPartialWithGasFields
                description: Partial UserOperation object, missing paymasterAndData and signature fields

alchemy_requestGasAndPaymasterAndData:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: alchemy_requestGasAndPaymasterAndData
        params:
          type: array
          description: Parameters for requesting gas and coverage
          minItems: 1
          maxItems: 1
          items:
            type: object
            properties:
              policyId:
                type: string
                description: The policy ID
                default: '69d524a7-e932-4214-8673-dcdcba31bb42'
              entryPoint:
                $ref: ./components/schemas.yaml#/EntryPoint
                default: '0x5FF137D4b0FDCD49DcA30c7CF57E578a026d2789'
              dummySignature:
                type: string
                description: Dummy signature for the operation. This is useful for estimating gas costs.
                default: '0xe8fe34b166b64d118dccf44c7198648127bf8a76a48a042862321af6058026d276ca6abb4ed4b60ea265d1e57e33840d7466de75e13f072bbd3b7e64387eebfe1b'
              userOperation:
                $ref: ./components/schemas.yaml#/UserOperationPartial
                description: Partial UserOperation object, missing gas parameters, paymasterAndData and signature fields.
              feeOverride:
                type: object
                description: Optional fields to override default fee behavior
                properties:
                  maxFeePerGas:
                    type: string
                    description: Maximum fee per gas
                  maxPriorityFeePerGas:
                    type: string
                    description: Maximum priority fee per gas
                required:
                  - maxFeePerGas
                  - maxPriorityFeePerGas

rundler_maxPriorityFeePerGas:
  allOf:
    - $ref: '#/common_request_fields'
    - type: object
      properties:
        method:
          $ref: ./components/schemas.yaml#/Method
          default: rundler_maxPriorityFeePerGas
        params:
          type: array
          items: {}
          description: Accepts no parameters
