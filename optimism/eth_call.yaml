openapi: 3.1.0
info:
  title: eth_call - optimism
  version: '1.0'
servers:
  - url: 'https://opt-mainnet.g.alchemy.com/v2'
paths:
  /{apiKey}:
    post:
      $ref: ../ethereum/eth_call.yaml#/components/pathItems/path/post
      operationId: eth-call-optimism
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
          - python
          - curl
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.OPT_MAINNET, // Replace with your network.
              };
              const alchemy = new Alchemy(settings);

              // Make a sample eth_call
              alchemy.core
                .call({
                  to: "0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41",
                  gas: "0x76c0",
                  gasPrice: "0x9184e72a000",
                  data: "0x3b3b57debf074faa138b72c65adbdcfb329847e4f2c04bde7f7dd7fcad5a52d2f395a558",
                })
                .then(console.log);
          - language: python
            code: "from web3 import Web3, HTTPProvider\r\n\r\n#Replace with your Alchemy API key:\r\napiKey = \"demo\"\r\n\r\n# Initialize a Web3.py instance\r\nweb3 = Web3(Web3.HTTPProvider('https://eth-mainnet.g.alchemy.com/v2 /'+apiKey))\r\n\r\n# Query the blockchain (replace example parameters)\r\ndata = web3.eth.call({\r\n\t\t'value': 0, \r\n\t\t'gas': 21736, \r\n\t\t'maxFeePerGas': 2000000000, \r\n\t\t'maxPriorityFeePerGas': 1000000000, \r\n\t\t'to': '0xc305c90',\r\n\t\t'data': '0x477a5c98'\r\n\t\t}) \r\n\r\n# Print the output to console\r\nprint(data)"
            name: web3.py
