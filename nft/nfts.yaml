openapi: 3.1.0
info:
  title: ðŸŽ¨ NFT API
  version: '1.0'
servers:
  - description: Ethereum Mainnet
    url: 'https://eth-mainnet.g.alchemy.com/nft/v2'
  - description: Ethereum Rinkeby
    url: 'https://eth-rinkeby.g.alchemy.com/nft/v2'
  - description: Ethereum Goerli
    url: 'https://eth-goerli.g.alchemy.com/nft/v2'
  - description: Polygon Mainnet
    url: 'https://polygon-mainnet.g.alchemyapi.io/nft/v2'
  - description: Polygon Mumbai
    url: 'https://polygon-mumbai.g.alchemy.com/nft/v2'
paths:
  '/{apiKey}/getNFTs':
    get:
      summary: getNFTs
      description: Gets all NFTs currently owned by a given address.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/owner
          description: String - Address for NFT owner (can be in ENS format!).
        - $ref: nfts_body.yaml#/pageKey
          description: 'String - Cursor key for pagination. If more results are available, a pageKey will be returned in the response. Pass back that pageKey as a param to fetch the next 100 NFTs.'
        - $ref: nfts_body.yaml#/pageSize
          description: 'String - Number of NFTs to be returned per page. Defaults to 100. Max is 100.'
        - $ref: nfts_body.yaml#/contractAddresses
          description: Array of contract addresses to filter the responses with. Max limit 20 contracts.
        - $ref: nfts_body.yaml#/withMetadata
          description: 'True by default - If boolean is set to true the query will include metadata for each returned token. Setting this to false will reduce payload size and may result in a faster API call.'
        - $ref: nfts_body.yaml#/tokenUriTimeoutInMs
          description: 'No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.'
        - $ref: nfts_body.yaml#/filters
          description: |-
            Array of filters (as ENUMS) that will be applied to the query. NFTs that match one or more of these filters will be excluded from the response. Filter Options:
             - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs.
             - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet only.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: demo, // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.

              };

              const alchemy = new Alchemy(settings);

              // Print all NFTs returned in the response:
              alchemy.nft.getNftsForOwner("0xshah.eth").then(console.log);
      responses:
        '200':
          description: 'Returns true if transaction was successfully cancelled, false if not.'
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/getNFTs
              examples:
                byDefault:
                  $ref: 'get_nfts_examples.yaml#/byDefault'
                withoutMetadata:
                  $ref: 'get_nfts_examples.yaml#/withoutMetadata'
                withContractFiltering:
                  $ref: 'get_nfts_examples.yaml#/withContractFiltering'
                withPagination:
                  $ref: 'get_nfts_examples.yaml#/withPagination'

      operationId: getNFTs
  '/{apiKey}/getNFTMetadata':
    get:
      summary: getNFTMetadata
      description: Gets the metadata associated with a given NFT.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
        - $ref: nfts_body.yaml#/tokenId
        - $ref: nfts_body.yaml#/tokenType
          description: String - 'ERC721' or 'ERC1155'; specifies type of token to query for. API requests will perform faster if this is specified.
        - $ref: nfts_body.yaml#/tokenUriTimeoutInMs
        - $ref: nfts_body.yaml#/refreshCache
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print NFT metadata returned in the response:
              alchemy.nft.getNftMetadata(
                "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                "1590"
              ).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/ownedNFT
      operationId: getNFTMetadata
  '/{apiKey}/getContractMetadata':
    get:
      summary: getContractMetadata
      description: Queries NFT high-level collection/contract level information.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
          description: String - Address of NFT contract.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              alchemy.nft
                .getContractMetadata("0x61fce80d72363b731425c3a2a46a1a5fed9814b2")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/getContractMetadata
      operationId: getContractMetadata
  '/{apiKey}/getNFTsForCollection':
    get:
      summary: getNFTsForCollection
      description: Gets all NFTs for a given NFT contract.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
          description: String - contract address for the NFT collection
        - $ref: nfts_body.yaml#/withMetadata
          description: 'Boolean - if set to true, returns NFT metadata; otherwise will only return tokenIds. Defaults to false.'
        - $ref: nfts_body.yaml#/startToken
          description: 'String - An offset used for pagination. Can be a hex string, or a decimal.'
        - $ref: nfts_body.yaml#/limit
          description: Integer - Sets the total number of NFTs returned in the response. Defaults to 100.
        - $ref: nfts_body.yaml#/tokenUriTimeoutInMs
          description: 'No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT collection returned in the response:
              alchemy.nft
                .getNftsForContract("0x61fce80d72363b731425c3a2a46a1a5fed9814b2")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/getNFTsForCollection
      operationId: getNFTsForCollection
  '/{apiKey}/getOwnersForToken':
    get:
      summary: getOwnersForToken
      description: Get the owner(s) for a token.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
          description: String - The address of the contract that the token belongs to. We currently support both ERC721 and ERC1155 contracts.
        - $ref: nfts_body.yaml#/tokenId
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT count returned in the response:
              alchemy.nft.getOwnersForNft("0x5180db8F5c931aaE63c74266b211F580155ecac8", "1590").then(
                console.log
              );
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/getOwnersForToken
      operationId: getOwnersForToken
  '/{apiKey}/getOwnersForCollection':
    get:
      summary: getOwnersForCollection
      description: Gets all owners for a given NFT contract.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
          description: String - Contract address for the NFT collection
        - $ref: nfts_body.yaml#/withTokenBalances
          description: Boolean - [boolean]  false by default. If set to true the query will include the token balances per token id for each owner.
        - $ref: nfts_body.yaml#/pageKey
          description: String - Page key for paginated results (see note on pagination)
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT count returned in the response:
              alchemy.nft
                .getOwnersForContract("0x61fce80d72363b731425c3a2a46a1a5fed9814b2")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/owners
      operationId: getOwnersForCollection
  '/{apiKey}/getSpamContracts':
    get:
      summary: getSpamContracts
      description: Returns a list of all spam contracts marked by Alchemy.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print all spam NFT contracts returned in the response:
              alchemy.nft.getSpamContracts().then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/arrayList
                description: A list of contract addresses earmarked as spam by Alchemy.
      operationId: getSpamContracts
  '/{apiKey}/isSpamContract':
    get:
      summary: isSpamContract
      description: Returns whether a contract is marked as spam or not by Alchemy.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
          description: String - The NFT contract address in question.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print whether an NFT contract is spam
              alchemy.nft
                .isSpamContract("0x000440f08436a7b866d1ae42db5e0be801da722a")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
                description: <br/> True - if the queried contract is marked as spam. <br/> False - if the queried contract is considered valid.
      operationId: isSpamContract
  '/{apiKey}/reingestContract':
    get:
      summary: reingestContract
      description: Triggers metadata refresh for an entire NFT collection and refreshes stale metadata after a collection reveal/collection changes.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
          description: String - The address of the NFT contract/collection that needs to be refreshed.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import {
                Network,
              } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT count returned in the response:
              alchemy.nft.refreshContract(
                "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                "1590"
              ).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/reingestContract
      operationId: reingestContract
  '/{apiKey}/getFloorPrice':
    get:
      summary: getFloorPrice
      description: Returns the floor prices of a NFT collection by marketplace.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
          description: String - Contract address for the NFT collection.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print the NFT floor price for a contract
              alchemy.nft
                .getFloorPrice("0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/getFloorPrice
      operationId: getFloorPrice
  '/{apiKey}/computeRarity':
    get:
      summary: computeRarity
      description: Computes the rarity of each attribute of an NFT.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
          description: String - Contract address for the NFT collection.
        - $ref: nfts_body.yaml#/tokenId
          description: String - Token ID for the NFT. Can be hex or decimal.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/computeRarity
      operationId: computeRarity
  '/{apiKey}/summarizeNftAttributes':
    get:
      summary: summarizeNftAttributes
      description: Generate a summary of attribute prevalence for an NFT collection.
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/contractAddress
          description: String - Contract address for the NFT collection.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/summarizeNftAttributes
      operationId: summarizeNftAttributes
  '/{apiKey}/isHolderOfCollection':
    get:
      summary: isHolderOfCollection
      description: Checks whether a wallet holds a NFT in a given collection
      tags: ['NFT API Endpoints']
      parameters:
        - $ref: nfts_body.yaml#/apiKey
        - $ref: nfts_body.yaml#/wallet
          description: String - Wallet address to check for collection ownership.
        - $ref: nfts_body.yaml#/contractAddress
          description: String - Contract address for the NFT collection.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: nfts_responses.yaml#/isHolderOfCollection
      operationId: isHolderOfCollection

# This section doesn't work yet (but it should according to ReadMe)
components:
  schemas:
    x-readme:
      samples-languages:
        - javascript
        - curl
        - python
        - go
