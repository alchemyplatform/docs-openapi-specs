openapi: 3.1.0
info:
  title: ðŸŽ¨ NFT API
  version: '1.0'
servers: # servers are also specified at the method level, if there ins't a specification then the server is supported on all the networks below
  - url: https://{network}.g.alchemy.com/nft
    variables:
      network:
        enum:
          - eth-mainnet
          - eth-goerli
          - eth-sepolia
          - polygon-mainnet
          - polygon-mumbai
          - arb-mainnet
          - arb-goerli
          - opt-mainnet
          - opt-goerli
          - base-mainnet
          - base-goerli
        default: eth-mainnet
paths:
  ##
  ## Below are all the v2 methods
  ##
  '/v2/{apiKey}/getNFTs':
    get:
      summary: getNFTs
      description: Gets all NFTs currently owned by a given address.
      tags: ['Ownership & Token Gating']
      parameters:
        - $ref: '#/components/schemas/owner'
        - $ref: '#/components/schemas/contractAddresses'
        - $ref: '#/components/schemas/withMetadata'
        - $ref: '#/components/schemas/orderBy'
        - $ref: '#/components/schemas/excludeFilters'
        - $ref: '#/components/schemas/includeFilters'
        - $ref: '#/components/schemas/spamConfidenceLevel'
        - $ref: '#/components/schemas/tokenUriTimeoutInMs'
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/pageKey'
        - $ref: '#/components/schemas/pageSize'
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: demo, // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.

              };

              const alchemy = new Alchemy(settings);

              // Print all NFTs returned in the response:
              alchemy.nft.getNftsForOwner("vitalik.eth").then(console.log);
      responses:
        '200':
          description: 'Returns the list of all NFTs owned by the given address and satisfying the given input parameters.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  ownedNfts:
                    type: array
                    items:
                      $ref: '#/components/schemas/ownedNFT'
                  pageKey:
                    $ref: '#/components/schemas/pageKey'
                  totalCount:
                    $ref: '#/components/schemas/totalNFTCount'
                  blockHash:
                    type: string
                    description: 'String - The canonical head block hash of when your request was received i.e. the block corresponding to `latest`'
              examples:
                byDefault:
                  $ref: '#/components/schemas/byDefault_response'
                withoutMetadata:
                  $ref: '#/components/schemas/withoutMetadata_response'
                withContractFiltering:
                  $ref: '#/components/schemas/withContractFiltering_response'
                withPagination:
                  $ref: '#/components/schemas/withPagination_response'
      operationId: getNFTs
  '/v2/{apiKey}/getNFTMetadata':
    get:
      summary: getNFTMetadata
      description: Gets the metadata associated with a given NFT.
      tags: ['NFT Metadata Access']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/tokenId'
          required: true
        - $ref: '#/components/schemas/tokenType'
        - $ref: '#/components/schemas/tokenUriTimeoutInMs'
        - $ref: '#/components/schemas/refreshCache'
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print NFT metadata returned in the response:
              alchemy.nft.getNftMetadata(
                "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                "1590"
              ).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ownedNFT'
      operationId: getNFTMetadata
  '/v2/{apiKey}/getNFTMetadataBatch':
    post:
      summary: getNFTMetadataBatch
      description: Gets the metadata associated with up to 100 given NFT contracts.
      tags: ['NFT Metadata Access']
      parameters:
        - $ref: '#/components/schemas/apiKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tokens:
                  type: array
                  description: List of token objects to batch request NFT metadata for. Maximum 100.
                  items:
                    type: object
                    properties:
                      contractAddress:
                        $ref: '#/components/schemas/contractAddress'
                      tokenId:
                        $ref: '#/components/schemas/tokenId'
                      tokenType:
                        $ref: '#/components/schemas/tokenType'
                tokenUriTimeoutInMs:
                  $ref: '#/components/schemas/tokenUriTimeoutInMs'
                  type: number
                refreshCache:
                  $ref: '#/components/schemas/refreshCache'
                  type: boolean
                  default: false
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print NFT metadata returned in the response:
              alchemy.nft.getNftMetadata(
                "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                "1590"
              ).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ownedNFT'
      operationId: getNFTMetadataBatch
  '/v2/{apiKey}/getContractMetadata':
    get:
      summary: getContractMetadata
      description: Queries NFT high-level collection/contract level information.
      tags: ['NFT Metadata Access']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              alchemy.nft
                .getContractMetadata("0x61fce80d72363b731425c3a2a46a1a5fed9814b2")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                    description: 'String - Contract address for the queried NFT collection'
                  contractMetadata:
                    $ref: '#/components/schemas/contractMetadata'
      operationId: getContractMetadata
  '/v2/{apiKey}/getContractMetadataBatch':
    post:
      summary: getContractMetadataBatch
      description: Gets the metadata associated with the given list of contract addresses
      tags: ['NFT Metadata Access']
      parameters:
        - $ref: '#/components/schemas/apiKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contractAddresses:
                  type: array
                  description: list of contract addresses to batch metadata requests for
                  default:
                    [
                      '0xe785E82358879F061BC3dcAC6f0444462D4b5330',
                      '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d',
                    ]
                  items:
                    $ref: '#/components/schemas/contractAddress'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    address:
                      $ref: '#/components/schemas/address'
                    contractMetadata:
                      $ref: '#/components/schemas/ownedContract'
      operationId: getContractMetadataBatch
  '/v2/{apiKey}/getNFTsForCollection':
    get:
      summary: getNFTsForCollection
      description: Gets all NFTs for a given NFT contract.
      tags: ['Collections']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
        - $ref: '#/components/schemas/collectionSlug'
        - $ref: '#/components/schemas/withMetadata'
        - $ref: '#/components/schemas/startToken'
        - $ref: '#/components/schemas/limit'
        - $ref: '#/components/schemas/tokenUriTimeoutInMs'
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT collection returned in the response:
              alchemy.nft
                .getNftsForContract("0x61fce80d72363b731425c3a2a46a1a5fed9814b2")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  nfts:
                    description: 'List of objects that represent NFTs stored under the queried contract address or collection slug.'
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: '#/components/schemas/id'
                        tokenUri:
                          $ref: '#/components/schemas/tokenUri'
                        metadata:
                          $ref: '#/components/schemas/metadata'
                        timeLastUpdated:
                          type: string
                          description: 'String - ISO timestamp of the last cache refresh for the information returned in the metadata field.'
                        contractMetadata:
                          $ref: '#/components/schemas/contractMetadata'
                  nextToken:
                    type: string
                    description: 'String - An offset used for pagination. Can be passed back as the "startToken" of a subsequent request to get the next page of results. Absent if there are no more results.'
      operationId: getNFTsForCollection
  '/v2/{apiKey}/getOwnersForToken':
    get:
      summary: getOwnersForToken
      description: Get the owner(s) for a token.
      tags: ['Ownership & Token Gating']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/tokenId'
          required: true
        - $ref: '#/components/schemas/pageKey'
        - $ref: '#/components/schemas/getOwnersForTokenPageSize'
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT count returned in the response:
              alchemy.nft.getOwnersForNft("0x5180db8F5c931aaE63c74266b211F580155ecac8", "1590").then(
                console.log
              );
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  owners:
                    $ref: '#/components/schemas/owners'
      operationId: getOwnersForToken
  '/v2/{apiKey}/getOwnersForCollection':
    get:
      summary: getOwnersForCollection
      description: Gets all owners for a given NFT contract.
      tags: ['Ownership & Token Gating']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/withTokenBalances'
        - $ref: '#/components/schemas/block'
        - $ref: '#/components/schemas/pageKey'
          description: String - used for collections with >50,000 owners. `pageKey` field can be passed back as request parameter to get the next page of results.
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT count returned in the response:
              alchemy.nft
                .getOwnersForContract("0x61fce80d72363b731425c3a2a46a1a5fed9814b2")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/owners'
      operationId: getOwnersForCollection
  '/v2/{apiKey}/getSpamContracts':
    get:
      summary: getSpamContracts
      description: Returns a list of all spam contracts marked by Alchemy.
      tags: ['Spam Detection']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print all spam NFT contracts returned in the response:
              alchemy.nft.getSpamContracts().then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: Object that has list of contract addresses
                properties:
                  contractAddresses:
                    type: array
                    items:
                      type: string
                    description: A list of contract addresses earmarked as spam by Alchemy.
      operationId: getSpamContracts
  '/v2/{apiKey}/isSpamContract':
    get:
      summary: isSpamContract
      description: Returns whether a contract is marked as spam or not by Alchemy.
      tags: ['Spam Detection']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print whether an NFT contract is spam
              alchemy.nft
                .isSpamContract("0x000440f08436a7b866d1ae42db5e0be801da722a")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
                description: <br/> True - if the queried contract is marked as spam. <br/> False - if the queried contract is considered valid or if the contract hasn't been evaluated by us yet.
      operationId: isSpamContract
  '/v2/{apiKey}/isAirdrop':
    get:
      summary: isAirdrop
      description: Returns whether a token is marked as an airdrop or not. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address.
      tags: ['Spam Detection']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/tokenId'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
                description: <br/> True - if the queried token is marked as an airdrop. <br/> False - if the queried token is not marked as an airdrop.
      operationId: isAirdrop
  '/v2/{apiKey}/invalidateContract':
    get:
      summary: invalidateContract
      description: Marks all cached tokens for the particular contract as stale. So the next time the endpoint is queried it fetches live data instead of fetching from cache.
      tags: ['NFT Metadata Access']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: <br/> True - if the queried contract is marked as spam. <br/> False - if the queried contract is considered valid.
                properties:
                  success:
                    type: string
                    description: <br /> True if the contract was invalidated. <br/> False - if it wasn't.
                  numTokensInvalidated:
                    type: number
                    description: The number of tokens that were invalidated as a result of running this query.
      operationId: invalidateContract
  '/v2/{apiKey}/reingestContract':
    get:
      summary: reingestContract
      description: Triggers metadata refresh for an entire NFT collection and refreshes stale metadata after a collection reveal/collection changes.
      tags: ['NFT Metadata Access']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import {
                Network,
              } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT count returned in the response:
              alchemy.nft.refreshContract(
                "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                "1590"
              ).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  contractAddresses:
                    $ref: '#/components/schemas/contractAddresses'
                  reingestionState:
                    type: string
                    enum:
                      - does_not_exist
                      - already_queried
                      - in_progress
                      - finished
                      - queued
                      - queue_failed
                    description: "<br/> String - The current state of the reingestion request. <br/>'does_not_exist' - The contract requested is not an NFT and does not contain proper metadata <br/>'already_queried' - Contract already queried <br/>'in_progress' - Ingestion in progress <br/>'finished' - Ingestion complete <br/>'queued' - Ingestion request placed into queue and awaiting execution. <br/>'queue_failed' - Queue job incomplete"
                  progress:
                    type: string
                    description: 'String - Percentage of tokens successfully refreshed.'
      operationId: reingestContract
  '/v2/{apiKey}/getFloorPrice':
    get:
      summary: getFloorPrice
      description: Returns the floor prices of a NFT collection by marketplace.
      tags: ['Sales & Marketplace Data']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print the NFT floor price for a contract
              alchemy.nft
                .getFloorPrice("0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  nftMarketplace:
                    type: object
                    description: 'Name of the NFT marketplace where the collection is listed. Current marketplaces supported -  OpenSea, LooksRare'
                    properties:
                      floorPrice:
                        type: number
                        description: 'Number - The floor price of the collection on the given marketplace.'
                      priceCurrency:
                        type: string
                        description: 'String - The currency in which the floor price is denominated. Typically, denominated in ETH'
                        enum:
                          - ETH
                      collectionUrl:
                        type: string
                        description: 'String - Link to the collection on the given marketplace.'
                      retrievedAt:
                        type: string
                        description: 'String - UTC timestamp of when the floor price was retrieved from the marketplace.'
                      error:
                        type: string
                        description: 'String - Returns an error if there was an error fetching floor prices from the given marketplace.'
      operationId: getFloorPrice
  '/v2/{apiKey}/computeRarity':
    get:
      summary: computeRarity
      description: Computes the rarity of each attribute of an NFT.
      tags: ['Rarity Data']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/tokenId'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: Object containing the rarity info of the collection
                properties:
                  rarities:
                    type: array
                    description: 'NFT attributes and their associated prevalence.'
                    items:
                      type: object
                      properties:
                        trait_type:
                          type: string
                          description: 'Name of the trait category, i.e. Hat, Color, Face, etc.'
                        value:
                          type: string
                          description: 'Value for the trait, i.e. White Cap, Blue, Angry, etc.'
                        prevalence:
                          type: number
                          description: 'Floating point value from 0 to 1 representing the prevalence of this value for this trait type.'
      operationId: computeRarity
  '/v2/{apiKey}/searchContractMetadata':
    get:
      summary: searchContractMetadata
      description: Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts
      tags: ['NFT Metadata Access']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/query'
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
      responses:
        '200':
          description: 'Returns the list of NFT contracts where the metadata has one or more keywords from the search string.'
          content:
            application/json:
              schema:
                type: array
                description: 'List of contracts where the metadata contains one or more keywords from the search string.'
                items:
                  type: object
                  properties:
                    address:
                      $ref: '#/components/schemas/contractAddress'
                    contractMetadata:
                      $ref: '#/components/schemas/contractMetadata'
      operationId: searchContractMetadata
  '/v2/{apiKey}/summarizeNFTAttributes':
    get:
      summary: summarizeNFTAttributes
      description: Generate a summary of attribute prevalence for an NFT collection.
      tags: ['Rarity Data']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: 'Prevalence counts for each attribute within a collection.'
                properties:
                  totalSupply:
                    $ref: '#/components/schemas/totalSupply'
                  summary:
                    type: object
                    description: 'Object mapping trait types to the prevalence of each trait within that type.'
                  contractAddress:
                    $ref: '#/components/schemas/contractAddress'
      operationId: summarizeNFTAttributes
  '/v2/{apiKey}/isHolderOfCollection':
    get:
      summary: isHolderOfCollection
      description: Checks whether a wallet holds a NFT in a given collection
      tags: ['Ownership & Token Gating']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/wallet'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: "Data related to a wallet's ownership of any token in an NFT collection."
                properties:
                  isHolderOfCollection:
                    type: boolean
                    description: 'Whether the given wallet owns any token in the given NFT collection.'
      operationId: isHolderOfCollection
  '/v2/{apiKey}/getNFTSales':
    get:
      summary: getNFTSales
      description: Gets NFT sales that have happened through on-chain marketplaces
      tags: ['Sales & Marketplace Data']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
                - opt-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/fromBlock'
        - $ref: '#/components/schemas/toBlock'
        - $ref: '#/components/schemas/order'
        - $ref: '#/components/schemas/marketplace'
        - $ref: '#/components/schemas/contractAddress'
          description: String - The contract address of a NFT collection to filter sales by. Defaults to returning all NFT contracts.
        - $ref: '#/components/schemas/tokenIdForNFTSales'
          description: String - The token ID of an NFT within the collection specified by contractAddress to filter sales by. Defaults to returning all token IDs.
        - $ref: '#/components/schemas/buyerAddress'
        - $ref: '#/components/schemas/sellerAddress'
        - $ref: '#/components/schemas/taker'
        - $ref: '#/components/schemas/limit'
          description: Integer - The maximum number of NFT sales to return. Maximum and default values are 1000.
        - $ref: '#/components/schemas/pageKey'
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  nftSales:
                    description: 'List of NFT sales that match the query'
                    type: array
                    items:
                      type: object
                      properties:
                        marketplace:
                          type: string
                          description: String - The marketplace the sale took place on.
                        contractAddress:
                          type: string
                          description: String - The contract address of the collection the NFT belongs to.
                        tokenId:
                          type: string
                          description: String - The decimal token ID of the NFT being sold.
                        quantity:
                          type: string
                          description: Integer - The number of tokens sold in the sale as a decimal integer string.
                        buyerAddress:
                          type: string
                          description: String - The address of the buyer in the NFT sale.
                        sellerAddress:
                          type: string
                          description: String - The address of the seller in the NFT sale.
                        taker:
                          type: string
                          description: String - Whether the price taker in the trade was the buyer or the seller.
                          enum:
                            - BUYER
                            - SELLER
                        sellerFee:
                          type: object
                          description: The payment from buyer to the seller
                          properties:
                            amount:
                              type: string
                              description: String - The amount of the payment from the buyer to seller as a decimal integer string.
                            symbol:
                              type: string
                              description: String - The symbol of the token used for the payment.
                            decimals:
                              type: integer
                              description: Integer - The number of decimals of the token used for the payment.
                        protocolFee:
                          type: object
                          description: The payment from buyer to the NFT marketplace protocol
                          properties:
                            amount:
                              type: string
                              description: String - The amount of the payment to the marketplace as a decimal integer string.
                            symbol:
                              type: string
                              description: String - The symbol of the token used for the payment.
                            decimals:
                              type: integer
                              description: Integer - The number of decimals of the token used for the payment.
                        royaltyFee:
                          type: object
                          description: The payment from buyer to the royalty address of the NFT collection
                          properties:
                            amount:
                              type: string
                              description: String - The amount of the payment to the royalty collector as a decimal integer string.
                            symbol:
                              type: string
                              description: String - The symbol of the token used for the payment.
                            decimals:
                              type: integer
                              description: Integer - The number of decimals of the token used for the payment.
                        blockNumber:
                          type: integer
                          description: Integer - The block number the NFT sale took place in.
                        logIndex:
                          type: integer
                          description: Integer - The log number of the sale event emitted within the block.
                        bundleIndex:
                          type: integer
                          description: Integer - The index of the token within the bundle of NFTs sold in the sale.
                        transactionHash:
                          type: string
                          description: String - The transaction hash of the transaction containing the sale.
                  pageKey:
                    type: string
                    description: String - The page key to use to fetch the next page of results. Returns null if there are no more results.
              examples:
                nftSales_response:
                  $ref: '#/components/schemas/nftSales_response'
      operationId: getNFTSales
  '/v2/{apiKey}/getContractsForOwner':
    get:
      summary: getContractsForOwner
      description: Gets all NFT contracts held by an owner address.
      tags: ['Ownership & Token Gating']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/owner'
        - $ref: '#/components/schemas/pageKey'
        - $ref: '#/components/schemas/pageSize'
        - $ref: '#/components/schemas/withMetadata'
        - $ref: '#/components/schemas/includeFilters'
        - $ref: '#/components/schemas/excludeFilters'
        - $ref: '#/components/schemas/orderBy'
        - $ref: '#/components/schemas/spamConfidenceLevel'
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  contracts:
                    type: array
                    items:
                      $ref: '#/components/schemas/ownedContract'
                  pageKey:
                    $ref: '#/components/schemas/pageKey'
                  totalCount:
                    $ref: '#/components/schemas/totalContractCount'
              examples:
                withoutMetadata:
                  $ref: '#/components/schemas/withoutMetadataGetContractsForOwner_response'
                withMetadata:
                  $ref: '#/components/schemas/withMetadataGetContractsForOwner_response'
      operationId: getContractsForOwner
  '/v2/{apiKey}/reportSpam':
    get:
      summary: reportSpam
      description: Report a particular address to our APIs if you think it is spam
      tags: ['Spam Detection']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/address'
          required: true
      x-readme:
        samples-languages:
          - curl
          - javascript
          - python
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                description: 'String - "Address was successfully reported as spam" if calling the API was successful. '
      operationId: reportSpam
  ## End of v2 methods
  ##
  ## Below are all the v3 methods
  '/v3/{apiKey}/getNFTsForOwner':
    get:
      summary: getNFTsForOwner
      description: Gets all NFTs currently owned by a given address.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/owner'
        - $ref: '#/components/schemas/contractAddresses'
        - $ref: '#/components/schemas/withMetadata'
        - $ref: '#/components/schemas/orderBy'
        - $ref: '#/components/schemas/excludeFilters'
        - $ref: '#/components/schemas/includeFilters'
        - $ref: '#/components/schemas/spamConfidenceLevel'
        - $ref: '#/components/schemas/tokenUriTimeoutInMs'
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/pageKey'
        - $ref: '#/components/schemas/pageSize'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: 'Returns the list of all NFTs owned by the given address and satisfying the given input parameters.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  ownedNfts:
                    type: array
                    description: 'Array of the NFT objects corresponding to the NFTs owned by the owner'
                    items:
                      $ref: '#/components/schemas/ownedNFTv3'
                  totalCount:
                    $ref: '#/components/schemas/totalNFTCount'
                  pageKey:
                    $ref: '#/components/schemas/pageKey'
                  validAt:
                    $ref: '#/components/schemas/validAt'
              examples:
                byDefault:
                  $ref: '#/components/schemas/v3byDefault_response'
                withoutMetadata:
                  $ref: '#/components/schemas/v3withoutMetadata_response'
                withContractFiltering:
                  $ref: '#/components/schemas/v3withContractFiltering_response'
                withPagination:
                  $ref: '#/components/schemas/v3withPagination_response'
      operationId: getNFTsForOwner-v3
  '/v3/{apiKey}/getNFTMetadata':
    get:
      summary: getNFTMetadata
      description: Gets the metadata associated with a given NFT.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/tokenId'
          required: true
        - $ref: '#/components/schemas/tokenType'
        - $ref: '#/components/schemas/tokenUriTimeoutInMs'
        - $ref: '#/components/schemas/refreshCache'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ownedNFTv3'
      operationId: getNFTMetadata-v3
  '/v3/{apiKey}/getNFTMetadataBatch':
    post:
      summary: getNFTMetadataBatch
      description: Gets the metadata associated with up to 100 given NFT contracts.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                tokens:
                  type: array
                  description: List of token objects to batch request NFT metadata for. Maximum 100.
                  default:
                    [
                      {
                        contractAddress: '0xe785E82358879F061BC3dcAC6f0444462D4b5330',
                        tokenId: '44',
                        tokenType: 'ERC721',
                      },
                      {
                        contractAddress: '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d',
                        tokenId: '888',
                        tokenType: 'ERC721',
                      },
                    ]
                  items:
                    type: object
                    properties:
                      contractAddress:
                        $ref: '#/components/schemas/contractAddress'
                      tokenId:
                        $ref: '#/components/schemas/tokenId'
                      tokenType:
                        $ref: '#/components/schemas/tokenType'
                tokenUriTimeoutInMs:
                  $ref: '#/components/schemas/tokenUriTimeoutInMs'
                  type: number
                refreshCache:
                  $ref: '#/components/schemas/refreshCache'
                  type: boolean
                  default: false
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                description: 'Array of NFT objects corresponding to the query'
                items:
                  $ref: '#/components/schemas/ownedNFTv3'
      operationId: getNFTMetadataBatch-v3
  '/v3/{apiKey}/getContractMetadata':
    get:
      summary: getContractMetadata
      description: Queries NFT high-level collection/contract level information.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/contractMetadatav3'
      operationId: getContractMetadata-v3
  '/v3/{apiKey}/getCollectionMetadata':
    get:
      summary: getCollectionMetadata
      description: Queries NFT high-level collection/contract level information.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/collectionSlug'
          required: true
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/collectionMetadatav3'
      operationId: getCollectionMetadata-v3
  '/v3/{apiKey}/getContractMetadataBatch':
    post:
      summary: getContractMetadataBatch
      description: Gets the metadata associated with the given list of contract addresses
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contractAddresses:
                  type: array
                  description: list of contract addresses to batch metadata requests for
                  default:
                    [
                      '0xe785E82358879F061BC3dcAC6f0444462D4b5330',
                      '0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d',
                    ]
                  items:
                    $ref: '#/components/schemas/contractAddress'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/contractMetadatav3'
      operationId: getContractMetadataBatch-v3
  '/v3/{apiKey}/getNFTsForContract':
    get:
      summary: getNFTsForContract
      description: Gets all NFTs for a given NFT contract.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/withMetadata'
        - $ref: '#/components/schemas/startToken'
        - $ref: '#/components/schemas/limit'
        - $ref: '#/components/schemas/tokenUriTimeoutInMs'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  nfts:
                    description: 'List of objects that represent NFTs stored under the queried contract address.'
                    type: array
                    items:
                      $ref: '#/components/schemas/ownedNFTv3'
                  pageKey:
                    type: string
                    description: 'String - An offset used for pagination. Can be passed back as the "startToken" of a subsequent request to get the next page of results. Absent if there are no more results.'
      operationId: getNFTsForContract-v3
  '/v3/{apiKey}/getOwnersForNFT':
    get:
      summary: getOwnersForNFT
      description: Get the owner(s) for a token.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/tokenId'
          required: true
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  owners:
                    $ref: '#/components/schemas/owners'
                  pageKey:
                    $ref: '#/components/schemas/pageKey'
              examples:
                getOwnersForNFT_response:
                  $ref: '#/components/schemas/getOwnersForNFT_response'
      operationId: getOwnersForNFT-v3
  '/v3/{apiKey}/getOwnersForContract':
    get:
      summary: getOwnersForContract
      description: Gets all owners for a given NFT contract.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/withTokenBalances'
        - $ref: '#/components/schemas/block'
        - $ref: '#/components/schemas/pageKey'
          description: String - used for contracts with >50,000 owners. `pageKey` field can be passed back as request parameter to get the next page of results.
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  owners:
                    description: 'List of all addresses that own one of the NFTs from the queried contract address. The below format is applicable when `withTokenBalances=true`'
                    type: array
                    items:
                      type: object
                      properties:
                        ownerAddress:
                          $ref: '#/components/schemas/address'
                        tokenBalances:
                          $ref: '#/components/schemas/tokenBalances'
      operationId: getOwnersForContract-v3
  '/v3/{apiKey}/getSpamContracts':
    get:
      summary: getSpamContracts
      description: Returns a list of all spam contracts marked by Alchemy.
      tags: ['NFT API V3 Methods (BETA)']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
              default: eth-mainnet
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: Object that has list of contract addresses
                properties:
                  contractAddresses:
                    type: array
                    items:
                      type: string
                    description: A list of contract addresses earmarked as spam by Alchemy.
      operationId: getSpamContracts-v3
  '/v3/{apiKey}/isSpamContract':
    get:
      summary: isSpamContract
      description: Returns whether a contract is marked as spam or not by Alchemy.
      tags: ['NFT API V3 Methods (BETA)']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: 'This object has the boolean value inside it'
                properties:
                  isSpamContract:
                    type: boolean
                    description: <br/> True - if the queried contract is marked as spam. <br/> False - if the queried contract is considered valid.
      operationId: isSpamContract-v3
  '/v3/{apiKey}/isAirdropNFT':
    get:
      summary: isAirdropNFT
      description: Returns whether a token is marked as an airdrop or not. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/tokenId'
          required: true
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: 'This object has the boolean value inside it'
                properties:
                  isAirdrop:
                    type: boolean
                    description: <br/> True - if the queried token is marked as an airdrop. <br/> False - if the queried token is not marked as an airdrop.
      operationId: isAirdropNFT-v3
  '/v3/{apiKey}/getFloorPrice':
    get:
      summary: getFloorPrice
      description: Returns the floor prices of a NFT collection by marketplace.
      tags: ['NFT API V3 Methods (BETA)']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
        - $ref: '#/components/schemas/collectionSlug'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  nftMarketplaceName:
                    type: object
                    description: 'Name of the NFT marketplace where the collection is listed (in camel case). Current marketplaces supported - `openSea`, `looksRare`. So instead of the word `nftMarketplaceName` you will see marketplace names like `openSea` here.'
                    properties:
                      floorPrice:
                        type: number
                        description: 'Number - The floor price of the collection on the given marketplace.'
                      priceCurrency:
                        type: string
                        description: 'String - The currency in which the floor price is denominated. Typically, denominated in ETH'
                        enum:
                          - ETH
                      collectionUrl:
                        type: string
                        description: 'String - Link to the collection on the given marketplace.'
                      retrievedAt:
                        type: string
                        description: 'String - UTC timestamp of when the floor price was retrieved from the marketplace.'
                      error:
                        type: string
                        description: 'String - Returns the error `unable to fetch floor price` if there was an error fetching floor prices from the given marketplace.'
      operationId: getFloorPrice-v3
  '/v3/{apiKey}/computeRarity':
    get:
      summary: computeRarity
      description: Computes the rarity of each attribute of an NFT.
      tags: ['NFT API V3 Methods (BETA)']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
        - $ref: '#/components/schemas/tokenId'
          required: true
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: Object containing the rarity info of the collection
                properties:
                  rarities:
                    type: array
                    description: 'NFT attributes and their associated prevalence.'
                    items:
                      type: object
                      properties:
                        trait_type:
                          type: string
                          description: 'Name of the trait category, i.e. Hat, Color, Face, etc.'
                        value:
                          type: string
                          description: 'Value for the trait, i.e. White Cap, Blue, Angry, etc.'
                        prevalence:
                          type: number
                          description: 'Floating point value from 0 to 1 representing the prevalence of this value for this trait type.'
      operationId: computeRarity-v3
  '/v3/{apiKey}/searchContractMetadata':
    get:
      summary: searchContractMetadata
      description: Search for a keyword across metadata of all ERC-721 and ERC-1155 smart contracts
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/query'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: 'Returns the list of NFT contracts where the metadata has one or more keywords from the search string.'
          content:
            application/json:
              schema:
                type: array
                description: 'List of contracts where the metadata contains one or more keywords from the search string.'
                items:
                  $ref: '#/components/schemas/contractMetadatav3'
      operationId: searchContractMetadata-v3
  '/v3/{apiKey}/summarizeNFTAttributes':
    get:
      summary: summarizeNFTAttributes
      description: Generate a summary of attribute prevalence for an NFT collection.
      tags: ['NFT API V3 Methods (BETA)']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: 'Prevalence counts for each attribute within a collection.'
                properties:
                  totalSupply:
                    $ref: '#/components/schemas/totalSupply'
                  summary:
                    type: object
                    description: 'Object mapping trait types to the prevalence of each trait within that type.'
                  contractAddress:
                    $ref: '#/components/schemas/contractAddress'
              examples:
                summarizeNFTAttributes_response:
                  $ref: '#/components/schemas/summarizeNFTAttributes_response'
      operationId: summarizeNFTAttributes-v3
  '/v3/{apiKey}/isHolderOfContract':
    get:
      summary: isHolderOfContract
      description: Checks whether a wallet holds a NFT from a given contract
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/wallet'
        - $ref: '#/components/schemas/contractAddress'
          required: true
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                description: "Data related to a wallet's ownership of any token in an NFT contract."
                properties:
                  isHolderOfContract:
                    type: boolean
                    description: 'Whether the given wallet owns any token in the given NFT contract.'
      operationId: isHolderOfContract-v3
  '/v3/{apiKey}/getNFTSales':
    get:
      summary: getNFTSales
      description: Gets NFT sales that have happened through on-chain marketplaces
      tags: ['NFT API V3 Methods (BETA)']
      servers:
        - url: https://{network}.g.alchemy.com/nft
          variables:
            network:
              enum:
                - eth-mainnet
                - polygon-mainnet
                - opt-mainnet
              default: eth-mainnet
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/fromBlock'
        - $ref: '#/components/schemas/toBlock'
        - $ref: '#/components/schemas/order'
        - $ref: '#/components/schemas/marketplace'
        - $ref: '#/components/schemas/contractAddress'
          description: String - The contract address of a NFT collection to filter sales by. Defaults to returning all NFT contracts.
        - $ref: '#/components/schemas/tokenIdForNFTSales'
          description: String - The token ID of an NFT within the collection specified by contractAddress to filter sales by. Defaults to returning all token IDs.
        - $ref: '#/components/schemas/buyerAddress'
        - $ref: '#/components/schemas/sellerAddress'
        - $ref: '#/components/schemas/taker'
        - $ref: '#/components/schemas/limit'
          description: Integer - The maximum number of NFT sales to return. Maximum and default values are 1000.
        - $ref: '#/components/schemas/pageKey'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  nftSales:
                    description: 'List of NFT sales that match the query'
                    type: array
                    items:
                      type: object
                      properties:
                        marketplace:
                          type: string
                          description: String - The marketplace the sale took place on.
                        marketplaceAddress:
                          type: string
                          description: String - The address of the marketplace contract.
                        contractAddress:
                          type: string
                          description: String - The contract address of the collection the NFT belongs to.
                        tokenId:
                          type: string
                          description: String - The decimal token ID of the NFT being sold.
                        quantity:
                          type: string
                          description: Integer - The number of tokens sold in the sale as a decimal integer string.
                        buyerAddress:
                          type: string
                          description: String - The address of the buyer in the NFT sale.
                        sellerAddress:
                          type: string
                          description: String - The address of the seller in the NFT sale.
                        taker:
                          type: string
                          description: String - Whether the price taker in the trade was the buyer or the seller.
                          enum:
                            - BUYER
                            - SELLER
                        sellerFee:
                          type: object
                          description: The payment from buyer to the seller
                          properties:
                            amount:
                              type: string
                              description: String - The amount of the payment from the buyer to seller as a decimal integer string.
                            tokenAddress:
                              type: string
                              description: String - The smart contract address of the token used for the payment.
                            symbol:
                              type: string
                              description: String - The symbol of the token used for the payment.
                            decimals:
                              type: integer
                              description: Integer - The number of decimals of the token used for the payment.
                        protocolFee:
                          type: object
                          description: The payment from buyer to the NFT marketplace protocol
                          properties:
                            amount:
                              type: string
                              description: String - The amount of the payment to the marketplace as a decimal integer string.
                            tokenAddress:
                              type: string
                              description: String - The smart contract address of the token used for the payment.
                            symbol:
                              type: string
                              description: String - The symbol of the token used for the payment.
                            decimals:
                              type: integer
                              description: Integer - The number of decimals of the token used for the payment.
                        royaltyFee:
                          type: object
                          description: The payment from buyer to the royalty address of the NFT collection
                          properties:
                            amount:
                              type: string
                              description: String - The amount of the payment to the royalty collector as a decimal integer string.
                            tokenAddress:
                              type: string
                              description: String - The smart contract address of the token used for the payment.
                            symbol:
                              type: string
                              description: String - The symbol of the token used for the payment.
                            decimals:
                              type: integer
                              description: Integer - The number of decimals of the token used for the payment.
                        blockNumber:
                          type: integer
                          description: Integer - The block number the NFT sale took place in.
                        logIndex:
                          type: integer
                          description: Integer - The log number of the sale event emitted within the block.
                        bundleIndex:
                          type: integer
                          description: Integer - The index of the token within the bundle of NFTs sold in the sale.
                        transactionHash:
                          type: string
                          description: String - The transaction hash of the transaction containing the sale.
                  pageKey:
                    type: string
                    description: String - The page key to use to fetch the next page of results. Returns null if there are no more results.
                  validAt:
                    $ref: '#/components/schemas/validAt'
              examples:
                nftSales_response:
                  $ref: '#/components/schemas/nftSales_response'
      operationId: getNFTSales-v3
  '/v3/{apiKey}/getContractsForOwner':
    get:
      summary: getContractsForOwner
      description: Gets all NFT contracts held by an owner address.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/owner'
        - $ref: '#/components/schemas/pageKey'
        - $ref: '#/components/schemas/pageSize'
        - $ref: '#/components/schemas/withMetadata'
        - $ref: '#/components/schemas/includeFilters'
        - $ref: '#/components/schemas/excludeFilters'
        - $ref: '#/components/schemas/orderBy'
        - $ref: '#/components/schemas/spamConfidenceLevel'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  contracts:
                    type: array
                    items:
                      $ref: '#/components/schemas/ownedContractv3'
                  pageKey:
                    $ref: '#/components/schemas/pageKey'
                  totalCount:
                    $ref: '#/components/schemas/totalContractCount'
              examples:
                withoutMetadata:
                  $ref: '#/components/schemas/withoutMetadataGetContractsForOwner_response'
                withMetadata:
                  $ref: '#/components/schemas/withMetadataGetContractsForOwner_response'
      operationId: getContractsForOwner-v3
  '/v3/{apiKey}/getCollectionsForOwner':
    get:
      summary: getCollectionsForOwner
      description: Gets all NFT collections held by an owner address.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/owner'
        - $ref: '#/components/schemas/pageKey'
        - $ref: '#/components/schemas/pageSize'
        - $ref: '#/components/schemas/withMetadata'
        - $ref: '#/components/schemas/includeFilters'
        - $ref: '#/components/schemas/excludeFilters'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  collections:
                    type: array
                    items:
                      $ref: '#/components/schemas/ownedCollectionv3'
                  pageKey:
                    $ref: '#/components/schemas/pageKey'
                  totalCount:
                    type: string
                    description: 'String - Total number of NFT collections held by the given address.'
              examples:
                withoutMetadata:
                  $ref: '#/components/schemas/withoutMetadataGetCollectionsForOwner_response'
                withMetadata:
                  $ref: '#/components/schemas/withMetadataGetCollectionsForOwner_response'
      operationId: getCollectionsForOwner-v3
  '/v3/{apiKey}/reportSpam':
    get:
      summary: reportSpam
      description: Report a particular address to our APIs if you think it is spam
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/address'
          required: true
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: string
                description: 'String - "Address was successfully reported as spam" if calling the API was successful. '
      operationId: reportSpam-v3
  '/v3/{apiKey}/refreshNftMetadata':
    post:
      summary: refreshNftMetadata
      description: Submit a request that Alchemy refresh the cached NFT metadata for a particular token.
      tags: ['NFT API V3 Methods (BETA)']
      parameters:
        - $ref: '#/components/schemas/apiKey'
      x-readme:
        samples-languages:
          - javascript
          - curl
          - python
          - go
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                contractAddress:
                  type: string
                  description: Contract address of the token you want to refresh.
                  $ref: '#/components/schemas/contractAddress'
                  default: '0xe785E82358879F061BC3dcAC6f0444462D4b5330'
                tokenId:
                  type: string
                  description: Token ID of the token you want to refresh. Must belong to the contract address.
                  $ref: '#/components/schemas/tokenId'
                  default: '44'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    description: 'If the token is successfully queued for ingestion the value will be "Queued"'
                  estimatedMsToRefresh:
                    type: string
                    description: 'Estimated time until we are done refreshing metadata for this token'
              examples:
                byDefault:
                  $ref: '#/components/schemas/refreshNftMetadata_response'
      operationId: refreshNftMetadata-v3
## End of v3 methods

components:
  schemas:
    apiKey:
      name: apiKey
      in: path
      schema:
        type: string
        default: docs-demo
        description: |
          <style>
            .custom-style {
              color: #048FF4;
            }
          </style>
          For higher throughput, <span class="custom-style"><a href="https://alchemy.com/?a=docs-demo" target="_blank">create your own API key</a></span>
      required: true
    owner:
      name: owner
      description: String - Address for NFT owner (can be in ENS format for Eth Mainnet).
      schema:
        type: string
        default: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
      in: query
      required: true
    wallet:
      name: wallet
      description: String - Wallet address to check for contract ownership.
      schema:
        type: string
        default: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045'
      in: query
      required: true
    pageKey:
      name: pageKey
      description: 'String - key for pagination. If more results are available, a pageKey will be returned in the response. Pass back the pageKey as a param to fetch the next page of results.'
      schema:
        type: string
      in: query
    pageSize:
      name: pageSize
      description: 'Number of NFTs to be returned per page. Defaults to 100. Max is 100.'
      schema:
        type: integer
        default: 100
      in: query
    getOwnersForTokenPageSize:
      name: pageSize
      description: 'Number of owners to be returned per page.'
      schema:
        type: integer
      in: query
    contractAddresses:
      name: contractAddresses[]
      description: Array of contract addresses to filter the responses with. Max limit 45 contracts.
      schema:
        type: array
        items:
          type: string
      in: query
    withMetadata:
      name: withMetadata
      description: 'Boolean - if set to `true`, returns NFT metadata. Setting this to false will reduce payload size and may result in a faster API call. Defaults to `true`.'
      schema:
        type: boolean
        default: true
      in: query
    excludeFilters:
      name: excludeFilters[]
      description: |-
        Array of filters (as ENUMS) that will be applied to the query. NFTs that match one or more of these filters will be excluded from the response. May not be used in conjunction with includeFilters[]. Filter Options:
          - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. NOTE: this filter is currently supported on Ethereum Mainnet and Matic Mainnet only.
          - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.
          - To learn more about spam, you can refer to this: <span class="custom-style"><a href="https://www.alchemy.com/overviews/spam-nfts" target="_blank">Spam NFTs and how to fix them</a></span>
      schema:
        type: array
        items:
          type: string
          enum:
            - SPAM
            - AIRDROPS
          default: [SPAM]
      in: query
    address:
      name: address
      description: String - any valid blockchain address for NFT collections, contracts, mints, etc.
      in: query
      schema:
        type: string
        default: '0xe785E82358879F061BC3dcAC6f0444462D4b5330'
      required: false
    includeFilters:
      name: includeFilters[]
      description: |-
        Array of filters (as ENUMS) that will be applied to the query. Only NFTs that match one or more of these filters will be included in the response. May not be used in conjunction with excludeFilters[]. Filter Options:
          - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs. NOTE: this filter is currently supported on Ethereum Mainnet and Matic Mainnet only.
          - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet, Ethereum Goerli, and Matic Mainnet only.
          - To learn more about spam, you can refer to this: <span class="custom-style"><a href="https://www.alchemy.com/overviews/spam-nfts" target="_blank">Spam NFTs and how to fix them</a></span>
      schema:
        type: array
        items:
          type: string
          enum:
            - SPAM
            - AIRDROPS
          default: [SPAM]
      in: query
    spamConfidenceLevel:
      name: spamConfidenceLevel
      description: |-
        Enum - the confidence level at which to filter spam at.

        Confidence Levels:
          - VERY_HIGH
          - HIGH
          - MEDIUM
          - LOW

        The confidence level set means that any spam that is at that confidence level or higher will be filtered out. For example, if the confidence level is HIGH, contracts that we have HIGH or VERY_HIGH confidence in being spam will be filtered out from the response. 
        Defaults to VERY_HIGH for Ethereum Mainnet and MEDIUM for Matic Mainnet.
      schema:
        type: string
        enum:
          - VERY_HIGH
          - HIGH
          - MEDIUM
          - LOW
      in: query
      required: false
    collectionSlug:
      name: collectionSlug
      description: String - OpenSea slug for the NFT collection.
      in: query
      schema:
        type: string
        default: 'boredapeyachtclub'
      required: false
    contractAddress:
      name: contractAddress
      description: String - Contract address for the NFT contract (ERC721 and ERC1155 supported).
      in: query
      schema:
        type: string
        default: '0xe785E82358879F061BC3dcAC6f0444462D4b5330'
      required: false
    tokenId:
      name: tokenId
      description: String - The ID of the token. Can be in hex or decimal format.
      in: query
      schema:
        type: string
        default: '44'
      required: true
    tokenIdForNFTSales:
      name: tokenId
      description: String - The ID of the token. Can be in hex or decimal format.
      in: query
      schema:
        type: string
        default: '44'
      required: false
    tokenType:
      name: tokenType
      description: String - 'ERC721' or 'ERC1155'; specifies type of token to query for. API requests will perform faster if this is specified.
      in: query
      schema:
        type: string
    startToken:
      name: startToken
      description: 'String - A tokenID offset used for pagination. Can be a hex string, or a decimal. Users can specify the offset themselves to start from a custom offset, or to fetch multiple token ranges in parallel.'
      in: query
      schema:
        type: string
    limit:
      name: limit
      description: Integer - Sets the total number of NFTs returned in the response. Defaults to 100.
      in: query
      schema:
        type: integer
    tokenUriTimeoutInMs:
      name: tokenUriTimeoutInMs
      description: 'No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.'
      in: query
      schema:
        type: integer
    withTokenBalances:
      name: withTokenBalances
      description: Boolean - If set to `true` the query will include the token balances per token id for each owner. `false` by default.
      in: query
      schema:
        type: boolean
        default: false
    refreshCache:
      name: refreshCache
      description: Defaults to false for faster response times.  If true will refresh metadata for given token. If false will check the cache and use it or refresh if cache doesn't exist.
      in: query
      schema:
        type: boolean
        default: false
    block:
      name: block
      description: String - The point in time or block number (in hex or decimal) to fetch collection ownership information for.
      in: query
      schema:
        type: string
    fromBlock:
      name: fromBlock
      description: String - The block number to start fetching NFT sales data from. Allowed values are decimal and hex integers, and "latest". Defaults to "0".
      in: query
      schema:
        type: string
        default: '0'
    toBlock:
      name: toBlock
      description: String - The block number to start fetching NFT sales data from. Allowed values are decimal and hex integers, and "latest". Defaults to "latest".
      in: query
      schema:
        type: string
        default: 'latest'
    order:
      name: order
      description: Enum - Whether to return the results ascending from startBlock or descending from startBlock. Defaults to descending (false).
      in: query
      schema:
        type: string
        enum:
          - asc
          - desc
        default: asc
    orderBy:
      name: orderBy
      description: |-
        Enum - ordering scheme to use for ordering NFTs in the response. If unspecified, NFTs will be ordered by contract address and token ID.
          - transferTime: NFTs will be ordered by the time they were transferred into the wallet, with newest NFTs first. NOTE: this ordering is only supported on Ethereum Mainnet and Polygon Mainnet.
      in: query
      schema:
        type: string
        enum:
          - transferTime
          - null
      required: false
    marketplace:
      name: marketplace
      description: Enum - The name of the NFT marketplace to filter sales by. The endpoint currently supports "seaport", "wyvern", "looksrare", "x2y2", "blur", and "cryptopunks". Defaults to returning sales from all supported marketplaces.
      in: query
      schema:
        type: string
        enum:
          - seaport
          - looksrare
          - x2y2
          - wyvern
          - blur
          - cryptopunks
      required: false
    buyerAddress:
      name: buyerAddress
      description: String - The address of the NFT buyer to filter sales by. Defaults to returning sales involving any buyer.
      in: query
      schema:
        type: string
    sellerAddress:
      name: sellerAddress
      description: String - The address of the NFT seller to filter sales by. Defaults to returning sales involving any seller.
      in: query
      schema:
        type: string
    taker:
      name: taker
      description: Enum - Filter by whether the buyer or seller was the taker in the NFT trade. Allowed filter values are "BUYER" and "SELLER". Defaults to returning both buyer and seller taker trades.
      in: query
      schema:
        type: string
        enum:
          - BUYER
          - SELLER
        required: false
    query:
      name: query
      description: String - The search string that you want to search for in contract metadata
      in: query
      schema:
        type: string
        default: bored
      required: true

    # ===== Response Objects ========
    tokenType_response:
      type: string
      enum:
        - ERC721
        - ERC1155
        - NO_SUPPORTED_NFT_STANDARD
        - NOT_A_CONTRACT
      description: "String - For valid NFTs, 'ERC721' or 'ERC1155.' For invalid NFTs, a descriptive reason such as 'NO_SUPPORTED_NFT_STANDARD' if the input contract address doesn't support a known NFT standard, or 'NOT_A_CONTRACT' if there is no contract deployed at the input address."
    raw:
      type: string
      description: "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated."
    totalNFTCount:
      type: string
      description: 'String - Total number of NFTs (distinct `tokenIds`) owned by the given address.'
    totalContractCount:
      type: string
      description: 'String - Total number of NFT contracts held by the given address returned in this page.'
    totalSupply:
      type: string
      description: 'String - Total number of NFTs in a given NFT collection.'
    rawv3:
      type: object
      description: 'Raw details of the NFT like its tokenUri and metadata info obtained directly from the smart contract'
      properties:
        tokenUri:
          type: string
          description: "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated."
        metadata:
          $ref: '#/components/schemas/metadatav3'
        error:
          type: string
          description: 'String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.'
    collectionv3:
      type: object
      description: 'The collection object that has details of a collection'
      properties:
        name:
          type: String
          description: 'String - Collection name'
        slug:
          type: String
          description: 'String - OpenSea collection slug'
        externalUrl:
          type: String
          description: 'String - URL for the external site of the collection'
        bannerImageUrl:
          type: String
          description: 'String - Banner image URL for the collection'
    imagev3:
      type: object
      description: 'Details of the image corresponding to this contract'
      properties:
        cachedUrl:
          type: string
          description: 'The Url of the image stored in Alchemy cache'
        thumbnailUrl:
          type: string
          description: 'The Url that has the thumbnail version of the NFT'
        pngUrl:
          type: string
          description: 'The Url that has the NFT image in png'
        contentType:
          type: string
          description: 'The Url of the image stored in Alchemy cache'
        size:
          type: integer
          description: The size of the media asset in bytes.
        originalUrl:
          type: string
          description: 'The original Url of the image coming straight from the smart contract'
    gateway:
      type: string
      description: 'String - Public gateway uri for the raw uri above.'
    id:
      type: object
      properties:
        tokenId:
          $ref: '#/components/schemas/tokenId'
        tokenMetadata:
          type: object
          properties:
            tokenType:
              $ref: '#/components/schemas/tokenType_response'
    tokenUri:
      type: object
      properties:
        raw:
          $ref: '#/components/schemas/raw'
        gateway:
          $ref: '#/components/schemas/gateway'
    metadata:
      type: object
      description: 'Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.'
      properties:
        image:
          type: string
          description: 'String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.'
        external_url:
          type: string
          description: 'String - The image URL that appears alongside the asset image on NFT platforms.'
        background_color:
          type: string
          description: 'String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.'
        name:
          type: string
          description: 'String - Name of the NFT asset.'
        description:
          type: string
          description: 'String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)'
        attributes:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              trait_type:
                type: string
          description: 'Object - Traits/attributes/characteristics for each NFT asset.'
        media:
          $ref: '#/components/schemas/media'
    metadatav3:
      type: object
      description: 'Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.'
      properties:
        image:
          type: string
          description: 'String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.'
        name:
          type: string
          description: 'String - Name of the NFT asset.'
        description:
          type: string
          description: 'String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)'
        attributes:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              trait_type:
                type: string
          description: 'Object - Traits/attributes/characteristics for each NFT asset.'
    ownedContract:
      type: object
      description: 'The object that represents a smart contract and has all data corresponding to that contract'
      properties:
        address:
          description: 'Address of the held contract'
          type: string
        totalBalance:
          type: number
          description: 'Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.'
        numDistinctTokensOwned:
          type: number
          description: 'Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.'
        isSpam:
          type: boolean
        tokenId:
          description: 'One of the tokens from this contract held by the owner.'
          type: string
        name:
          description: 'The name of the contract, i.e. "Bored Ape Yacht Club".'
          type: string
        title:
          description: 'The title of the token held by the owner i.e. "Something #22".'
          type: string
        symbol:
          description: 'The symbol of the contract, i.e. BAYC.'
          type: string
        tokenType:
          description: 'The NFT standard used by the contract, i.e. ERC721 or ERC1155.'
          type: string
        contractDeployer:
          type: string
          description: 'String - Address that deployed the smart contract'
        deployedBlockNumber:
          type: number
          description: 'Number - The Block Number when the deployment transaction is successfully mined'
        media:
          $ref: '#/components/schemas/media'
        opensea:
          $ref: '#/components/schemas/opensea'
    ownedContractv3:
      type: object
      description: 'The object that represents a smart contract and has all data corresponding to that contract'
      properties:
        address:
          $ref: '#/components/schemas/contractAddress'
        name:
          description: 'The name of the contract, i.e. "Bored Ape Yacht Club".'
          type: string
        symbol:
          description: 'The symbol of the contract, i.e. BAYC.'
          type: string
        totalSupply:
          $ref: '#/components/schemas/totalSupply'
        tokenType:
          $ref: '#/components/schemas/tokenType'
        contractDeployer:
          type: string
          description: 'String - Address that deployed the smart contract'
        deployedBlockNumber:
          type: number
          description: 'Number - The Block Number when the deployment transaction is successfully mined'
        openseaMetadata:
          $ref: '#/components/schemas/opensea'
        totalBalance:
          type: number
          description: 'Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.'
        numDistinctTokensOwned:
          type: number
          description: 'Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.'
        isSpam:
          type: boolean
          description: '`True` if the contract is detected as spam contract. `False` if it is not spam or has not been evaluated by our system yet'
        displayNft:
          $ref: '#/components/schemas/displaynftv3'
        image:
          $ref: '#/components/schemas/imagev3'
    ownedCollectionv3:
      type: object
      description: 'Metadata for an NFT collection held by an owner address. Includes general metadata about the collection, as well as information specific to the owner such as the total balance and the token ID of a random NFT for display purposes.'
      properties:
        name:
          description: 'The name of the collection, i.e. "Bored Ape Yacht Club".'
          type: string
        slug:
          description: 'The human-readable string used to identify the collection on OpenSea.'
          type: string
        floorPrice:
          $ref: '#/components/schemas/collectionFloorPrice'
        description:
          type: string
          description: 'OpenSea collection description'
        externalUrl:
          type: string
          description: 'Collection homepage'
        twitterUsername:
          type: string
          description: 'The twitter username of the collection'
        discordUrl:
          type: string
          description: 'The discord URL of the collection'
        contract:
          $ref: '#/components/schemas/ownedCollectionContract'
        totalBalance:
          type: number
          description: 'Sum of NFT balances across all token IDs held by the owner. For non-fungible tokens this will be equal to the `numDistinctTokensOwned`, but it may be higher if the user holds some fungible ERC1155 tokens.'
        numDistinctTokensOwned:
          type: number
          description: 'Number of distinct token IDs held by the owner. For non-fungible tokens this will be equal to the `totalBalance`, but it may be lower if the user holds some fungible ERC1155 tokens.'
        isSpam:
          type: string
          description: '"true" if contract is spam, else "false"'
        displayNft:
          $ref: '#/components/schemas/displaynftv3'
        image:
          $ref: '#/components/schemas/imagev3'
    ownedCollectionContract:
      type: object
      description: 'Contract-level data for a collection, such as contract type, name, and symbol.'
      properties:
        address:
          description: 'Address of the contract'
          type: string
        name:
          type: string
          description: 'String - NFT contract name.'
        symbol:
          type: string
          description: 'String - NFT contract symbol abbreviation.'
        tokenType:
          $ref: '#/components/schemas/tokenType_response'
        contractDeployer:
          type: string
          description: 'String - Address that deployed the smart contract'
        deployedBlockNumber:
          type: number
          description: 'Number - The Block Number when the deployment transaction is successfully mined'
    collectionFloorPrice:
      type: object
      description: 'Floor price data for the collection'
      properties:
        marketplace:
          description: 'The marketplace the floor price is on'
          type: string
        floorPrice:
          description: 'Floor price of the collection on the marketplace'
          type: number
        priceCurrency:
          description: 'The currency of the floor price'
          type: string
    displaynftv3:
      type: object
      description: 'Details of the display NFT for this contract. This NFT and its image can be used to represent the contract when displaying info about it.'
      properties:
        tokenId:
          description: 'One of the tokens from this contract held by the owner.'
          type: string
        name:
          description: 'The title of the token held by the owner i.e. "Something #22".'
          type: string
    media:
      type: array
      items:
        type: object
        properties:
          raw:
            $ref: '#/components/schemas/raw'
          gateway:
            $ref: '#/components/schemas/gateway'
          thumbnail:
            type: string
            description: URL for a resized thumbnail of the NFT media asset.
          format:
            type: string
            description: The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.
          bytes:
            type: integer
            description: The size of the media asset in bytes.
    ownedNFT:
      type: object
      description: 'The object that represents an NFT and has all data corresponding to that NFT'
      properties:
        contract:
          description: 'Object - Contract for returned NFT'
          type: object
          properties:
            address:
              type: string
              description: 'String - Address of NFT contract.'
        id:
          $ref: '#/components/schemas/id'
        balance:
          type: string
          description: 'String - Token balance'
        title:
          type: string
          description: 'String - Name of the NFT asset.'
        description:
          type: string
          description: 'String - Brief human-readable description'
        tokenUri:
          $ref: '#/components/schemas/tokenUri'
        media:
          type: object
          properties:
            raw:
              $ref: '#/components/schemas/raw'
            gateway:
              $ref: '#/components/schemas/gateway'
            thumbnail:
              type: string
              description: URL for a resized thumbnail of the NFT media asset.
            format:
              type: string
              description: The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.
            bytes:
              type: integer
              description: The size of the media asset in bytes.
        metadata:
          $ref: '#/components/schemas/metadata'
        timeLastUpdated:
          type: string
          description: 'String - ISO timestamp of the last cache refresh for the information returned in the metadata field.'
        error:
          type: string
          description: 'String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.'
        contractMetadata:
          $ref: '#/components/schemas/contractMetadata'
        spamInfo:
          $ref: '#/components/schemas/spamInfo'
        acquiredAt:
          $ref: '#/components/schemas/acquiredAt'
    ownedNFTv3:
      type: object
      description: 'The object that represents an NFT and has all data corresponding to that NFT'
      properties:
        contract:
          $ref: '#/components/schemas/contractv3'
        tokenId:
          $ref: '#/components/schemas/tokenId'
        tokenType:
          $ref: '#/components/schemas/tokenType'
        name:
          type: string
          description: 'String - Name of the NFT asset.'
        description:
          type: string
          description: 'String - Brief human-readable description'
        image:
          $ref: '#/components/schemas/imagev3'
        raw:
          $ref: '#/components/schemas/rawv3'
        collection:
          $ref: '#/components/schemas/collectionv3'
        tokenUri:
          type: string
          description: "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated."
        timeLastUpdated:
          type: string
          description: 'String - ISO timestamp of the last cache refresh for the information returned in the metadata field.'
        acquiredAt:
          $ref: '#/components/schemas/acquiredAt'
        #balance:
        #  type: string
        #  description: 'String - Token balance'
    acquiredAt:
      type: object
      description: 'Only present if the request specified `orderBy=transferTime`.'
      properties:
        blockTimestamp:
          type: string
          description: 'Block timestamp of the block where the NFT was most recently acquired.'
        blockNumber:
          type: string
          description: 'Block number of the block where the NFT was most recently acquired.'
    opensea:
      type: object
      properties:
        floorPrice:
          type: number
          description: 'NFT floor price'
        collectionName:
          type: string
          description: 'OpenSea collection name'
        safelistRequestStatus:
          type: string
          description: 'Collection approval status within OpenSea. For more info, see the Opensea docs at docs.opensea.io/reference/collection-model'
        imageUrl:
          type: string
          description: 'OpenSea CDN image URL'
        description:
          type: string
          description: 'OpenSea collection description'
        externalUrl:
          type: string
          description: 'Collection homepage'
        twitterUsername:
          type: string
          description: 'The twitter username of the collection'
        discordUrl:
          type: string
          description: 'The discord URL of the collection'
        lastIngestedAt:
          type: string
          description: 'The timestamp when the collection was last ingested by us'
    owners:
      type: array
      description: 'List of all addresses that own the given NFT.'
      items:
        type: string
    contractMetadata:
      type: object
      properties:
        name:
          type: string
          description: 'String - NFT contract name.'
        symbol:
          type: string
          description: 'String - NFT contract symbol abbreviation.'
        totalSupply:
          $ref: '#/components/schemas/totalSupply'
        tokenType:
          $ref: '#/components/schemas/tokenType_response'
        contractDeployer:
          type: string
          description: 'String - Address that deployed the smart contract'
        deployedBlockNumber:
          type: number
          description: 'Number - The Block Number when the deployment transaction is successfully mined'
        opensea:
          $ref: '#/components/schemas/opensea'
    contractMetadatav3:
      type: object
      properties:
        address:
          type: string
          description: 'String - Contract address for the queried NFT collection'
        name:
          type: string
          description: 'String - NFT contract name.'
        symbol:
          type: string
          description: 'String - NFT contract symbol abbreviation.'
        totalSupply:
          $ref: '#/components/schemas/totalSupply'
        tokenType:
          $ref: '#/components/schemas/tokenType_response'
        contractDeployer:
          type: string
          description: 'String - Address that deployed the smart contract'
        deployedBlockNumber:
          type: number
          description: 'Number - The Block Number when the deployment transaction is successfully mined'
        openseaMetadata:
          $ref: '#/components/schemas/opensea'
    collectionMetadatav3:
      type: object
      properties:
        name:
          type: string
          description: 'String - Name of the queried NFT Collection'
        slug:
          description: 'The human-readable string used to identify the collection on OpenSea.'
          type: string
        floorPrice:
          $ref: '#/components/schemas/collectionFloorPrice'
        description:
          type: string
          description: 'OpenSea collection description'
        externalUrl:
          type: string
          description: 'Collection homepage'
        twitterUsername:
          type: string
          description: 'The twitter username of the collection'
        discordUrl:
          type: string
          description: 'The discord URL of the collection'
    contractv3:
      type: object
      description: 'The contract object that has details of a contract'
      properties:
        address:
          description: 'Address of the held contract'
          type: string
        name:
          type: string
          description: 'String - NFT contract name.'
        symbol:
          type: string
          description: 'String - NFT contract symbol abbreviation.'
        totalSupply:
          $ref: '#/components/schemas/totalSupply'
        tokenType:
          $ref: '#/components/schemas/tokenType_response'
        contractDeployer:
          type: string
          description: 'String - Address that deployed the smart contract'
        deployedBlockNumber:
          type: number
          description: 'Number - The Block Number when the deployment transaction is successfully mined'
        openseaMetadata:
          $ref: '#/components/schemas/opensea'
        isSpam:
          type: string
          description: '"true" if contract is spam, else "false"'
        classifications:
          description: 'List of reasons why a contract was classified as spam.'
          type: array
          items:
            type: string
    spamInfo:
      type: object
      properties:
        description: 'Information about whether and why a contract was marked as spam.'
        isSpam:
          type: string
          description: '"true" if contract is spam, else "false"'
        classifications:
          description: 'List of reasons why a contract was classified as spam.'
          type: array
          items:
            type: string
    tokenBalances:
      type: array
      description: a list of the token ids and balances for the owner of the collection
      items:
        type: object
        properties:
          tokenId:
            type: string
            description: tokenId of the NFT in the collection that an owner has
          balance:
            type: integer
            description: the number of the specified token in the collection that the user owns
    validAt:
      type: object
      description: Block Information of the block as of which the corresponding data is valid
      properties:
        blockNumber:
          type: string
          description: 'The block number above information is valid as of'
        blockHash:
          type: string
          description: 'The block hash above information is valid as of'
        blockTimestamp:
          type: string
          description: 'The block timestamp above information is valid as of'
    # === getNFTs example responses ===
    byDefault_response:
      summary: 'Response (By Default)'
      value: >
        {
        "ownedNfts": [{
            "contract": {
              "address": "0x0beed7099af7514ccedf642cfea435731176fb02"
            },
            "id": {
              "tokenId": "28",
              "tokenMetadata": {
                "tokenType": "ERC721"
              }
            },
            "title": "DuskBreaker #28",
            "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
            "tokenUri": {
              "raw": "https://duskbreakers.gg/api/breakers/28",
              "gateway": "https://duskbreakers.gg/api/breakers/28"
            },
            "media": [{
              "raw": "https://duskbreakers.gg/breaker_images/28.png",
              "gateway": "https://duskbreakers.gg/breaker_images/28.png"
            }],
            "metadata": {
              "name": "DuskBreaker #28",
              "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
              "image": "https://duskbreakers.gg/breaker_images/28.png",
              "external_url": "https://duskbreakers.gg",
              "attributes": [{
                  "value": "Locust Rider Armor (Red)",
                  "trait_type": "Clothes"
                },
                {
                  "value": "Big Smile (Purple)",
                  "trait_type": "Mouth"
                },
                {
                  "value": "Yellow",
                  "trait_type": "Background"
                }
              ]
            },
            "timeLastUpdated": "2022-02-16T22:52:54.719Z",
            "contractMetadata": {
              "name": "DuskBreakers",
              "symbol": "DUSK",
              "totalSupply": "10000",
              "tokenType": "ERC721"
            }
          },
          {
            "contract": {
              "address": "0x97597002980134bea46250aa0510c9b90d87a587"
            },
            "id": {
              "tokenId": "5527",
              "tokenMetadata": {
                "tokenType": "ERC721"
              }
            },
            "title": "Runner #5527",
            "description": "Chain Runners are Mega City renegades 100% generated on chain.",
            "tokenUri": {
              "raw": "https://api.chainrunners.xyz/tokens/metadata/5527?dna=73247164192459371523281785218958151913554625578441142916970699984935810987041",
              "gateway": "https://api.chainrunners.xyz/tokens/metadata/5527?dna=73247164192459371523281785218958151913554625578441142916970699984935810987041"
            },
            "media": [{
              "raw": "https://img.chainrunners.xyz/api/v1/tokens/png/5527",
              "gateway": "https://img.chainrunners.xyz/api/v1/tokens/png/5527"
            }],
            "metadata": {
              "name": "Runner #5527",
              "description": "Chain Runners are Mega City renegades 100% generated on chain.",
              "image": "https://img.chainrunners.xyz/api/v1/tokens/png/5527",
              "attributes": [{
                  "value": "Purple Green Diag",
                  "trait_type": "Background"
                },
                {
                  "value": "Human",
                  "trait_type": "Race"
                },
                {
                  "value": "Cig",
                  "trait_type": "Mouth Accessory"
                }
              ]
            },
            "timeLastUpdated": "2022-02-18T00:42:04.401Z",
            "contractMetadata": {
              "name": "Chain Runners",
              "symbol": "RUN",
              "totalSupply": "10000",
              "tokenType": "ERC721"
            }
          }],
          "totalCount": 6,
          "blockHash": "0xeb2d26af5b6175344a14091777535a2cb21c681665a734a8285f889981987630"
        }
    withoutMetadata_response:
      summary: 'Response (withMetadata = false)'
      value: >
        {
          "ownedNfts": [{
              "contract": {
                "address": "0x0beed7099af7514ccedf642cfea435731176fb02"
              },
              "id": {
                "tokenId": "0x000000000000000000000000000000000000000000000000000000000000001c"
              }
            },
            {
              "contract": {
                "address": "0x0beed7099af7514ccedf642cfea435731176fb02"
              },
              "id": {
                "tokenId": "0x000000000000000000000000000000000000000000000000000000000000001d"
              },
              "balance": "1"
            },
            {
              "contract": {
                "address": "0x97597002980134bea46250aa0510c9b90d87a587"
              },
              "id": {
                "tokenId": "0x0000000000000000000000000000000000000000000000000000000000001597"
              },
              "balance": "1"
            }
          ],
          "totalCount": 6,
          "blockHash": "0xf9a2a4e15116680e22b160c734529f62d89d54cde0759daf5135672fad0ecebc"
        }
    withoutMetadataGetContractsForOwner_response:
      summary: 'Response (withMetadata = false)'
      value: >
        {
          "contracts": [
            {
              "address": "0x000386e3f7559d9b6a2f5c46b4ad1a9587d59dc3",
              "totalBalance": 912,
              "numDistinctTokensOwned": 80,
              "isSpam": true,
              "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000001"
            },
            {
              "address": "0x0015f391949f25c3211063104ad4afc99210f85c",
              "totalBalance": 17,
              "numDistinctTokensOwned": 6,
              "isSpam": true,
              "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000002"
            },
            {
              "address": "0x005b92d71a934dbe48e985b6469881cf4b0308fc",
              "totalBalance": 1,
              "numDistinctTokensOwned": 1,
              "isSpam": true,
              "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000003"
            }
          ],
          "totalCount": 2120,
          "pageKey": "20ef9df5-0d81-42e5-b741-140f595a407b"
        }
    withMetadataGetContractsForOwner_response:
      summary: 'Response (withMetadata = true)'
      value: >
        {
          "contracts": [
            {
              "address": "0x1C310c2fbB0D9755A6b918F990bC8D3504f2c684",
              "name": "The Wonderful Husl Founder Cards",
              "symbol": "The Wonderful Husl Founder Cards",
              "totalSupply": null,
              "tokenType": "ERC1155",
              "contractDeployer": "0x0bdD0AEC835F92a465290cdd57b27FBd00376F53",
              "deployedBlockNumber": 15664554,
              "openSeaMetadata": {
                "floorPrice": null,
                "collectionName": "The Wonderful Husl Founder Cards",
                "safelistRequestStatus": "not_requested",
                "imageUrl": "https://i.seadn.io/gcs/files/754e38769c80c9d6188444dddb10ec80.png?w=500&auto=format",
                "description": "[Husl](https://www.huslnft.xyz) is building the bridge between business and NFTs. Husl Founders are the driven, the passionate and the focused members of the community ready to change their future. Owning a Founders Card gets you exclusive perks, early access to business management, and discounts on managed services for your business as NFT. [Learn More](https://www.huslnft.xyz)",
                "externalUrl": "https://www.huslnft.xyz",
                "twitterUsername": null,
                "discordUrl": null,
                "lastIngestedAt": "2023-03-20T01:36:19.000Z"
              },
              "totalBalance": "1",
              "numDistinctTokensOwned": "1",
              "isSpam": true,
              "displayNft": {
              "tokenId": "233",
              "name": null
              },
              "image": {
                "cachedUrl": "https://nft-cdn.alchemy.com/eth-mainnet/d08d0d0fac8edf36ea09eae34b332814",
                "thumbnailUrl": "https://res.cloudinary.com/alchemyapi/image/upload/thumbnailv2/eth-mainnet/d08d0d0fac8edf36ea09eae34b332814",
                "pngUrl": "https://res.cloudinary.com/alchemyapi/image/upload/convert-png/eth-mainnet/d08d0d0fac8edf36ea09eae34b332814",
                "contentType": "video/mp4",
                "size": 36190302,
                "originalUrl": "https://ipfs.io/ipfs/QmX2mM8r33W7KUBQSWXFAKNC2t654EXmWiX9vkrfrEaEnS"
              }
            }
          ],
          "totalCount": 2120,
          "pageKey": "03949322-9b2c-4fdd-aab6-1369e29fa5b2"
        }
    withoutMetadataGetCollectionsForOwner_response:
      summary: 'Response (withMetadata = false)'
      value: >
        {
          "collections": [
            {
              "address": "0x3a5051566b2241285BE871f650C445A88A970edd",
              "name": "The Humanoids ",
              "slug": "thehumanoids",
              "totalBalance": "1",
              "numDistinctTokensOwned": "1",
              "isSpam": false
            },
          ],
          "totalCount": 2120,
          "pageKey": "20ef9df5-0d81-42e5-b741-140f595a407b"
        }
    withMetadataGetCollectionsForOwner_response:
      summary: 'Response (withMetadata = true)'
      value: >
        {
          "collections": [
            {
              "name": "The Humanoids ",
              "slug": "thehumanoids",
              "floorPrice": {
                "marketplace": "seaport",
                "floorPrice": 0.37
                "priceCurrency": "ETH"
              },
              "description": "The Humanoids (Gen 1) is a collection of 10,000 unique 3D 4K personalities.\n\n[GEN 1.1 (CUSTOMIZABLE PFP)](https://opensea.io/collection/the-humanoids-gen-1-1/) | [DISCORD](https://discord.gg/thehumanoids) | [TWITTER](https://twitter.com/thehumanoids)\n\nStake your Gen 1 Humanoid and earn $ION to customize Gen 1.1 Humanoids using our proprietary Trait Factory.\n\nNote: Holder Count is inaccurate as Humanoids are currently being staked.",
              "externalUrl": "http://thehumanoids.com",
              "twitterUsername": "thehumanoids",
              "discordUrl": "https://discord.gg/thehumanoids",
              "contract": {
                "address": "0x3a5051566b2241285BE871f650C445A88A970edd",
                "name": "The Humanoids ",
                "symbol": "HMNDS",
                "tokenType": "ERC721",
                "contractDeployer": "0xB8256c1c6654cedb9607644b07deC91Ca15fb9f6",
                "deployedBlockNumber": 13313830
              },
              "totalBalance": "1",
              "numDistinctTokensOwned": "1",
              "isSpam": false,
              "displayNft": {
                "tokenId": "5880",
                "name": "Humanoid #5880"
              },
              "image": {
                "cachedUrl": "https://nft-cdn.alchemy.com/eth-mainnet/57dab2f078ca70e310c387064f66daaa",
                "thumbnailUrl": "https://res.cloudinary.com/alchemyapi/image/upload/thumbnailv2/eth-mainnet/57dab2f078ca70e310c387064f66daaa",
                "pngUrl": "https://res.cloudinary.com/alchemyapi/image/upload/convert-png/eth-mainnet/57dab2f078ca70e310c387064f66daaa",
                "contentType": "image/jpeg",
                "size": 1898134,
                "originalUrl": "https://ipfs.io/ipfs/QmcjYgWMokcqnaSGZ31GVbGDe9V9z1KeNerRGfgeBEkn4k/5880.jpg"
              }
            }
          ],
          "totalCount": 2120,
          "pageKey": "03949322-9b2c-4fdd-aab6-1369e29fa5b2"
        }
    withContractFiltering_response:
      summary: 'Response (with contract filtering)'
      value: >
        {
          "ownedNfts": [{
            "contract": {
              "address": "0x34d77a17038491a2a9eaa6e690b7c7cd39fc8392"
            },
            "id": {
              "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000277"
            }
          }],
          "totalCount": 1,
          "blockHash": "0x3d8bca59c08e41f55d46ebbe738327eb12955cf280bd06ef7d40352919c188d8"
        }
    withPagination_response:
      summary: 'Response (with pagination)'
      value: >
        {
          "ownedNfts": [{
            "contract": {
              "address": "0x97597002980134bea46250aa0510c9b90d87a587"
            },
            "id": {
              "tokenId": "0x00000000000000000000000000000000000000000000000000000000000009cb"
            }
          }, {
            "contract": {
              "address": "0x97597002980134bea46250aa0510c9b90d87a587"
            },
            "id": {
              "tokenId": "0x00000000000000000000000000000000000000000000000000000000000009cc"
            }
          }, {
            "contract": {
              "address": "0x5ab21ec0bfa0b29545230395e3adaca7d552c948"
            },
            "id": {
              "tokenId": "0x00000000000000000000000000000000000000000000000000000000000006dc"
            }
          }, {
            "contract": {
              "address": "0x3b3ee1931dc30c1957379fac9aba94d1c48a5405"
            },
            "id": {
              "tokenId": "0x000000000000000000000000000000000000000000000000000000000000001a"
            }
          }, {
            "contract": {
              "address": "0x69c40e500b84660cb2ab09cb9614fa2387f95f64"
            },
            "id": {
              "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000391"
            }
          }, {
            "contract": {
              "address": "0x97597002980134bea46250aa0510c9b90d87a587"
            },
            "id": {
              "tokenId": "0x00000000000000000000000000000000000000000000000000000000000008d5"
            }
          }, {
            "contract": {
              "address": "0x97597002980134bea46250aa0510c9b90d87a587"
            },
            "id": {
              "tokenId": "0x0000000000000000000000000000000000000000000000000000000000000a1d"
            }
          }, {
            "contract": {
              "address": "0x97597002980134bea46250aa0510c9b90d87a587"
            },
            "id": {
              "tokenId": "0x000000000000000000000000000000000000000000000000000000000000002a"
            }
          }, {
            "contract": {
              "address": "0x97597002980134bea46250aa0510c9b90d87a587"
            },
            "id": {
              "tokenId": "0x000000000000000000000000000000000000000000000000000000000000038e"
            }
          }, {
            "contract": {
              "address": "0x97597002980134bea46250aa0510c9b90d87a587"
            },
            "id": {
              "tokenId": "0x000000000000000000000000000000000000000000000000000000000000244b"
            }
          }],
          "pageKey": "88434286-7eaa-472d-8739-32a0497c2a18",
          "totalCount": 277,
          "blockHash": "0x94d5ab52b8a6571733f6b183ef89f31573b82a4e78f8129b0ce90ef0beaf208b"
        }
    withTokenBalances_response:
      type: array
      description: List of objects representing the token ownership for owners
      items:
        type: object
        properties:
          ownerAddresses:
            type: string
            description: the address of an owner for the collection
          tokenBalances:
            type: array
            description: a list of the token ids and balances for the owner of the collection
            items:
              type: object
              properties:
                tokenId:
                  type: string
                  description: tokenId of the NFT in the collection that an owner has
                balance:
                  type: integer
                  description: the number of the specified token in the collection that the user owns
    # === getOwnersForNFT example responses ===
    getOwnersForNFT_response:
      value: >
        {
          "owners": [
            "0x9f4F78A6c4a5E6F8AFA81631b9120ae3C831b494"
          ],
          "pageKey": null
        }
    # === getNFTSales example response ===
    nftSales_response:
      summary: 'Response (with pagination)'
      value: >
        {
          "nftSales":[
            {
              "marketplace":"seaport",
              "contractAddress":"0x49cf6f5d44e70224e2e23fdcdd2c053f30ada28b",
              "tokenId":"13749",
              "quantity":"1",
              "buyerAddress":"0x78f6c2458b53d0735208992c693bb2b2dafebb52",
              "sellerAddress":"0x558a18f94cabdea4e47c5965384f457d8e870419",
              "taker":"BUYER",
              "sellerFee":{
                "amount":"11100000000000000000",
                "symbol":"ETH",
                "decimals":18
              },
              "protocolFee":{
                "amount":"300000000000000000",
                "symbol":"ETH",
                "decimals":18
              },
              "royaltyFee":{
                "amount":"600000000000000000",
                "symbol":"ETH",
                "decimals":18
              },
              "blockNumber":15000002,
              "logIndex":130,
              "bundleIndex":0,
              "transactionHash":"0xecfa1b29c9016bd2556fde637c6b48484eeb14f273af54c49317e3856ab7cb16"
            },
            {
              "marketplace":"looksrare",
              "contractAddress":"0x34d85c9cdeb23fa97cb08333b511ac86e1c4e258",
              "tokenId":"75417",
              "quantity":"1",
              "buyerAddress":"0xb3aa9923489bc2bfec323bf05346acd4afbc92a0",
              "sellerAddress":"0x206ccba024c236dced07c35b4e9eb0bade7ef166",
              "taker":"BUYER",
              "sellerFee":{
                "amount":"2222700000000000000",
                "symbol":"WETH",
                "decimals":18
              },
              "protocolFee":{
                "amount":"47800000000000000",
                "symbol":"WETH",
                "decimals":18
              },
              "royaltyFee":{
                "amount":"119500000000000000",
                "symbol":"WETH",
                "decimals":18
              },
              "blockNumber":15000002,
              "logIndex":197,
              "bundleIndex":0,
              "transactionHash":"0x4c23163e4f855e143e573776bc6129bee370dff6ce760e71553fc93201b292e2"
            }
          ],
          "pageKey":"MTUwMDAwNzgsODcsMA",
          "validAt": {
            "blockNumber": 17091500,
            "blockHash": "0x2a34a65c4e0cd7fdf187d6a497214ad2bee255d2d3501868a6b8c09b4d1261bd",
            "blockTimestamp": "2023-04-21T01:25:59Z"
          },
        }
    # === summarizeNFTAttributes example responses ===
    summarizeNFTAttributes_response:
      value: >
        {
          "summary": {
            "Earrings": {
              "WoW Coins": 437,
              "Pizza Lovers": 188,
              "Lucky Charms": 415,
              "White Ovals": 210,
              "Artist Palettes": 21,
              "Queen's Emeralds": 206,
              "Silver Drops": 822,
              "Flower Power": 366,
              "Pearls": 833,
              "Spikes": 776,
              "Yam's Fave": 381,
              "Classic Hoops": 780,
              "Ocean Hoops": 770,
              "Triple Rings": 823,
              "60s Fantasy": 399,
              "Lightning Bolts": 226,
              "Empresses Of Darkness": 103
            },
            "Necklace": {
              "WoW Coin": 481,
              "Malka": 494,
              "Amazonite Energy": 490,
              "Satin Choker": 721,
              "Back To The 90s": 706,
              "Empress of Darkness": 58,
              "Spike Choker": 449,
              "Golden Bib": 251,
              "Golden Flakes": 710,
              "Art Lover": 29,
              "Rainbow": 474,
              "Gold Ruler": 477,
              "Wolf Pendant": 229,
              "Tutti Frutti Beads": 691,
              "Sun Keeper": 730
            },
            "Eyes": {
              "Purple To The Left": 158,
              "Heterochromia To The Left": 57,
              "Brown To The Right": 455,
              "Black Eye Roll": 881,
              "Yellow To The Left": 141,
              "Purple Eye Roll": 145,
              "Green Straight": 433,
              "Blue To The Left": 407,
              "Green To The Right": 410,
              "Black Straight": 794,
              "Purple To The Right": 145,
              "Black To The Right": 870,
              "Green Eye Roll": 413,
              "Yellow Straight": 128,
              "Brown To The Left": 465,
              "Brown Eye Roll": 416,
              "Heterochromia To The Right": 76,
              "Blue Straight": 415,
              "Black To The Left": 877,
              "Heterochromia Eye Roll": 85,
              "Purple Straight": 158,
              "Brown Straight": 434,
              "Yellow Eye Roll": 141,
              "Heterochromia Straight": 77,
              "Yellow To The Right": 139,
              "Blue To The Right": 416,
              "Green To The Left": 424,
              "Blue Eye Roll": 440
            },
            "Background": {
              "Green Purple": 905,
              "Purple Pink": 905,
              "Dark Emerald": 924,
              "Yellow Pink": 896,
              "Pink Pastel": 849,
              "Blue Green": 924,
              "Soft Purple": 983,
              "Green Orange": 907,
              "Dark Purple": 876,
              "Red Turquoise": 914,
              "Orange Yellow": 917
            },
            "Mouth": {
              "Cigarette": 502,
              "Whistle": 868,
              "Slight Smile": 1666,
              "Stern": 1733,
              "Countryside": 927,
              "Huh": 506,
              "Slightly Open": 1661,
              "Bubble Gum": 404,
              "Surprised": 1733
            },
            "Clothes": {
              "80s Silk Shirt": 400,
              "70s Shirt": 421,
              "Fantasy Shirt": 542,
              "Adventurer": 583,
              "Striped Tee": 567,
              "Naiade": 98,
              "Tunic": 193,
              "Checkmate": 396,
              "Painter's Overall": 550,
              "Witch Dress": 198,
              "Little Red Dress": 437,
              "Cabaret Corset": 535,
              "Polka Dot Top": 573,
              "Freedom Is Power Tee": 368,
              "Warrior Armor": 177,
              "Emerald Elven Cape": 117,
              "Faux Fur Coat": 404,
              "Red Leather Jacket": 374,
              "White Tee": 533,
              "Tuxedo": 100,
              "Steampunk Octopus Top": 186,
              "Queen's Dress": 391,
              "Cherry Tee": 590,
              "NFT Goddesses Top": 189,
              "Gala Dress": 192,
              "Psychedelic Dress": 492,
              "Futuristic Dress": 394
            },
            "Facial Features": {
              "Nose Piercing": 598,
              "Red Eyeliner": 608,
              "Leader": 224,
              "Neck Tattoo": 227,
              "Pearl Eyes": 207,
              "Red Blue Bolt": 97,
              "Rose Tattoo": 286,
              "Feline Eyes": 590,
              "Elven Warrior": 99,
              "Marilyn": 633,
              "Freckles": 581,
              "Flashy Blue": 304,
              "Sunset": 297,
              "Heart Tattoo": 591,
              "Rainbow": 578,
              "Eyebrow Tattoo MMXXI": 303,
              "Eye Scar": 308,
              "Treble Bass Clef Tattoo": 210,
              "Crystal Queen": 221,
              "Antoinette": 582,
              "Cyber Warrior": 120,
              "Eyebrow Piercing": 619,
              "Claw Scar": 236
            },
            "Hairstyle": {
              "Badass Bob": 178,
              "Curly Ponytail": 390,
              "Finger Waves": 398,
              "Colorful": 186,
              "Fuchsia": 562,
              "Retro": 408,
              "Royal": 227,
              "Boy Cut": 566,
              "Bob": 653,
              "Bun": 607,
              "Long Dark": 416,
              "Curly Pearl Updo": 122,
              "Lucky Green": 417,
              "Lioness": 600,
              "Natural Red": 608,
              "Double Buns": 182,
              "Cotton Candy": 228,
              "Rose Hair": 388,
              "Purple Rainbow": 187,
              "Lollipop": 612,
              "Silver": 205,
              "Braided Ponytail": 561,
              "Platinum Pixie": 570,
              "Black And White": 110,
              "Feeling Turquoise": 412
            },
            "Lips Color": {
              "Space": 195,
              "Gold": 622,
              "Purple": 1967,
              "Burgundy": 1995,
              "Party Pink": 1114,
              "Passion Red": 3008,
              "Flashy Blue": 1099
            },
            "Skin Tone": {
              "Rainbow Bright": 197,
              "Light Warm Yellow": 1021,
              "Burning Red": 497,
              "Cyber Green": 511,
              "Night Goddess": 85,
              "Deep Warm Gold": 1026,
              "Light Medium Warm Gold": 997,
              "Deep Bronze": 1047,
              "Medium Olive": 976,
              "Deep Neutral": 996,
              "Medium Gold": 937,
              "Light Warm Olive": 1031,
              "Cool Blue": 486,
              "Golden": 193
            },
            "Face Accessories": {
              "Oversized Statement Sunglasses": 396,
              "Psychedelic Sunglasses": 390,
              "Resting Butterfly": 83,
              "Red Round Sunglasses": 695,
              "Classic Aviator WoW": 414,
              "Black Mask": 398,
              "Cateye Sunglasses": 221,
              "On Fire": 116,
              "70s Feels": 718,
              "3D Glasses": 216,
              "Round Glasses": 704,
              "Black Round Retro": 403,
              "Hypnotic Glasses": 209
            }
          },
          "totalSupply": "10000",
          "contractAddress": "0xe785E82358879F061BC3dcAC6f0444462D4b5330"
        }
    # === getNFTs v3 example responses ===
    v3byDefault_response:
      summary: 'Response (By Default)'
      value: >
        {
          "ownedNfts": [
            {
              "contract": {
                "address": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
                "name": "DuskBreakers",
                "symbol": "DUSK",
                "totalSupply": "10000",
                "tokenType": "ERC721",
                "contractDeployer": "0x9c78DDec1F16685ee6E58637a640514A1eD87BC4",
                "deployedBlockNumber": 13736379,
                "openSeaMetadata": {
                  "floorPrice": 0.0582,
                  "collectionName": "DuskBreakers",
                  "safelistRequestStatus": "verified",
                  "imageUrl": "https://i.seadn.io/gae/LGbFRVdClz6-HDd-7WZKONJ5Ody0sBXTvFOQL71BYo3j2iU2wWCX_zlk-Zs0KEhq1qgXViF-6aG_0WS2MdIVNJx2GRSIIYTiciuf-A?w=500&auto=format",
                  "description": "Being a DuskBreaker means joining a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology. You will be part of a community that directly influences the development of upcoming interactive media and gaming experiences within the DuskBreakers universe. Each of you will play an important role in building out this world. You break it, you take it! \r\n\r\nVisit [DuskBreakers](https://duskbreakers.gg) to learn more.",
                  "externalUrl": "http://duskbreakers.gg",
                  "twitterUsername": "duskbreakers",
                  "discordUrl": "https://discord.gg/duskbreakers",
                  "lastIngestedAt": "2023-04-19T17:25:59.000Z"
                },
                "isSpam": null,
                "spamClassifications": []
              },
              "tokenId": "28",
              "tokenType": "ERC721",
              "name": "DuskBreaker #28",
              "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
              "image": {
                "cachedUrl": "https://nft-cdn.alchemy.com/eth-mainnet/1f9e8be3feb42b5b66452537a4032668",
                "thumbnailUrl": "https://res.cloudinary.com/alchemyapi/image/upload/thumbnailv2/eth-mainnet/1f9e8be3feb42b5b66452537a4032668",
                "pngUrl": "https://res.cloudinary.com/alchemyapi/image/upload/convert-png/eth-mainnet/1f9e8be3feb42b5b66452537a4032668",
                "contentType": "image/png",
                "size": 1474037,
                "originalUrl": "https://duskbreakers.gg/breaker_images/28.png"
              },
              "raw": {
                "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/28",
                "metadata": {
                  "name": "DuskBreaker #28",
                  "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                  "image": "https://duskbreakers.gg/breaker_images/28.png",
                  "external_url": "https://duskbreakers.gg/",
                  "attributes": [
                    {
                      "value": "Locust Rider Armor (Red)",
                      "trait_type": "Clothes"
                    },
                    {
                      "value": "Base Drone (Blue)",
                      "trait_type": "Drone"
                    },
                    {
                      "value": "Thin",
                      "trait_type": "Eyebrows"
                    },
                    {
                      "value": "Button",
                      "trait_type": "Nose"
                    },
                    {
                      "value": "Mohawk (Black)",
                      "trait_type": "Hair"
                    },
                    {
                      "value": "Almond 2 (Red)",
                      "trait_type": "Eyes"
                    },
                    {
                      "value": "Big Smile (Purple)",
                      "trait_type": "Mouth"
                    },
                    {
                      "value": "Light Brown",
                      "trait_type": "Skin Tone"
                    },
                    {
                      "value": "Yellow",
                      "trait_type": "Background"
                    },
                    {
                      "value": "Facepaint (Stripe)",
                      "trait_type": "Face Augments"
                    }
                  ]
                },
                "error": null
              },
              "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/28",
              "timeLastUpdated": "2023-04-19T21:25:39.563Z",
              "balance": "1"
            },
            {
              "contract": {
                "address": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
                "name": "DuskBreakers",
                "symbol": "DUSK",
                "totalSupply": "10000",
                "tokenType": "ERC721",
                "contractDeployer": "0x9c78DDec1F16685ee6E58637a640514A1eD87BC4",
                "deployedBlockNumber": 13736379,
                "openSeaMetadata": {
                  "floorPrice": 0.0582,
                  "collectionName": "DuskBreakers",
                  "safelistRequestStatus": "verified",
                  "imageUrl": "https://i.seadn.io/gae/LGbFRVdClz6-HDd-7WZKONJ5Ody0sBXTvFOQL71BYo3j2iU2wWCX_zlk-Zs0KEhq1qgXViF-6aG_0WS2MdIVNJx2GRSIIYTiciuf-A?w=500&auto=format",
                  "description": "Being a DuskBreaker means joining a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology. You will be part of a community that directly influences the development of upcoming interactive media and gaming experiences within the DuskBreakers universe. Each of you will play an important role in building out this world. You break it, you take it! \r\n\r\nVisit [DuskBreakers](https://duskbreakers.gg) to learn more.",
                  "externalUrl": "http://duskbreakers.gg",
                  "twitterUsername": "duskbreakers",
                  "discordUrl": "https://discord.gg/duskbreakers",
                  "lastIngestedAt": "2023-04-19T17:25:59.000Z"
                },
                "isSpam": null,
                "spamClassifications": []
              },
              "tokenId": "29",
              "tokenType": "ERC721",
              "name": "DuskBreaker #29",
              "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
              "image": {
                "cachedUrl": "https://nft-cdn.alchemy.com/eth-mainnet/4eb0b7f434746250ff3c8200d10a2226",
                "thumbnailUrl": "https://res.cloudinary.com/alchemyapi/image/upload/thumbnailv2/eth-mainnet/4eb0b7f434746250ff3c8200d10a2226",
                "pngUrl": "https://res.cloudinary.com/alchemyapi/image/upload/convert-png/eth-mainnet/4eb0b7f434746250ff3c8200d10a2226",
                "contentType": "image/png",
                "size": 1480183,
                "originalUrl": "https://duskbreakers.gg/breaker_images/29.png"
              },
              "raw": {
                "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/29",
                "metadata": {
                  "name": "DuskBreaker #29",
                  "description": "Breakers have the honor of serving humanity through their work on The Dusk. They are part of a select squad of 10,000 recruits who spend their days exploring a mysterious alien spaceship filled with friends, foes, and otherworldly technology.",
                  "image": "https://duskbreakers.gg/breaker_images/29.png",
                  "external_url": "https://duskbreakers.gg/",
                  "attributes": [
                    {
                      "value": "Standard Issue Armor 1 (Orange)",
                      "trait_type": "Clothes"
                    },
                    {
                      "value": "Dark Metal",
                      "trait_type": "SmartSkin"
                    },
                    {
                      "value": "Base Drone (Purple)",
                      "trait_type": "Drone"
                    },
                    {
                      "value": "Thin",
                      "trait_type": "Eyebrows"
                    },
                    {
                      "value": "Broad",
                      "trait_type": "Nose"
                    },
                    {
                      "value": "Slick Back (Red)",
                      "trait_type": "Hair"
                    },
                    {
                      "value": "Sharp (Blue)",
                      "trait_type": "Eyes"
                    },
                    {
                      "value": "Smirk (Neutral)",
                      "trait_type": "Mouth"
                    },
                    {
                      "value": "Tan",
                      "trait_type": "Skin Tone"
                    },
                    {
                      "value": "Purple",
                      "trait_type": "Background"
                    }
                  ]
                },
                "error": null
              },
              "tokenUri": "https://api.duskbreakers.gg/metadata/duskbreakers/29",
              "timeLastUpdated": "2023-04-19T21:25:39.704Z",
              "balance": "1"
            },
            {
              "contract": {
                "address": "0x209cE666978779756Ae1E747608cD93e4dFf45fD",
                "name": "Knight of Chains Genesis",
                "symbol": "Knight of Chains Genesis",
                "totalSupply": null,
                "tokenType": "ERC1155",
                "contractDeployer": "0xA92520aFF50c5A1a4d25FCF90c972AA49EbE5299",
                "deployedBlockNumber": 14847327,
                "openSeaMetadata": {
                  "floorPrice": null,
                  "collectionName": "Knight of Chains Genesis.",
                  "safelistRequestStatus": "not_requested",
                  "imageUrl": "https://i.seadn.io/gae/eRhkkVikIOW_-lDc1moMrZlTcd5DPygPRmTJ69Anb-CfG_RMAxIsichM5kDvfdnXc6gfnKuGZOFCbP_58pUvz57TyUeNbFMKGydHoac?w=500&auto=format",
                  "description": "[The KnightsOfChain] (https://knightsofchain.link) is an exclusive community that can only be entered by owning a Knight.\n\nVisit [Website](https://knightsofchain.link) and get your benefits.\n\n(Genesis Knights #1-#31 were pre-minted by the team, and are held by high ranking community members. OG Knights #32-#231 have special benefits.)",
                  "externalUrl": "https://knightsofchain.link",
                  "twitterUsername": null,
                  "discordUrl": null,
                  "lastIngestedAt": "2023-03-20T03:52:07.000Z"
                },
                "isSpam": null,
                "spamClassifications": []
              },
              "tokenId": "97",
              "tokenType": "ERC1155",
              "name": null,
              "description": null,
              "image": {
                "cachedUrl": null,
                "thumbnailUrl": null,
                "pngUrl": null,
                "contentType": null,
                "size": null,
                "originalUrl": null
              },
              "raw": {
                "tokenUri": "https://knightsofchain.link/ipfs/97",
                "metadata": {},
                "error": null
              },
              "tokenUri": "https://knightsofchain.link/ipfs/97",
              "timeLastUpdated": "2023-04-20T15:44:29.965Z",
              "balance": "1"
            }
          ],
          "totalCount": 3,
          "validAt": {
            "blockNumber": 17091500,
            "blockHash": "0x2a34a65c4e0cd7fdf187d6a497214ad2bee255d2d3501868a6b8c09b4d1261bd",
            "blockTimestamp": "2023-04-21T01:25:59Z"
          },
          "pageKey": null
        }
    v3withoutMetadata_response:
      summary: 'Response (withMetadata = false)'
      value: >
        {
          "ownedNfts": [
            {
              "contractAddress": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
              "tokenId": "28",
              "balance": "1"
            },
            {
              "contractAddress": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
              "tokenId": "29",
              "balance": "1"
            }
          ],
          "totalCount": 2,
          "validAt": {
            "blockNumber": 17091500,
            "blockHash": "0x2a34a65c4e0cd7fdf187d6a497214ad2bee255d2d3501868a6b8c09b4d1261bd",
            "blockTimestamp": "2023-04-21T01:25:59Z"
          },
          "pageKey": null
        }
    v3withContractFiltering_response:
      summary: 'Response (with contract filtering)'
      value: >
        {
          "ownedNfts": [
            {
              "contractAddress": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
              "tokenId": "28",
              "balance": "1"
            },
            {
              "contractAddress": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
              "tokenId": "29",
              "balance": "1"
            }
          ],
          "totalCount": 2,
          "validAt": {
            "blockNumber": 17091500,
            "blockHash": "0x2a34a65c4e0cd7fdf187d6a497214ad2bee255d2d3501868a6b8c09b4d1261bd",
            "blockTimestamp": "2023-04-21T01:25:59Z"
          },
          "pageKey": null
        }
    v3withPagination_response:
      summary: 'Response (with pagination)'
      value: >
        {
          "ownedNfts": [
            {
              "contractAddress": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
              "tokenId": "28",
              "balance": "1"
            },
            {
              "contractAddress": "0x0bEed7099AF7514cCEDF642CfEA435731176Fb02",
              "tokenId": "29",
              "balance": "1"
            }
          ],
          "totalCount": 2,
          "validAt": {
            "blockNumber": 17091500,
            "blockHash": "0x2a34a65c4e0cd7fdf187d6a497214ad2bee255d2d3501868a6b8c09b4d1261bd",
            "blockTimestamp": "2023-04-21T01:25:59Z"
          },
          "pageKey": "88434286-7eaa-472d-8739-32a0497c2a18"
        }
    # === getNFTs v3 example responses ===
    refreshNftMetadata_response:
      summary: 'Successful Response'
      value: >
        {
          "status": "Queued",
          "estimatedMsToRefresh": 10000
        }
