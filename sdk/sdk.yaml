openapi: 3.1.0
info:
  title: üõ†Ô∏è Alchemy SDK
  version: '1.0'
servers:
  - url: 'https://alchemy-sdk-core-example.com'
paths:
  /{apiKey}/call:
    post:
      tags: ['SDK Core Endpoints']
      operationId: sdk-call
      summary: call
      description: Executes a new message call immediately without creating a transaction on the block chain.
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        description: Accepts the transaction call object.
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/eth_call_550_gas
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };
              const alchemy = new Alchemy(settings);

              // Make a sample eth_call
              alchemy.core
                .call({
                  to: "0x4976fb03C32e5B8cfe2b6cCB31c09Ba78EBaBa41",
                  gas: "0x76c0",
                  gasPrice: "0x9184e72a000",
                  data: "0x3b3b57debf074faa138b72c65adbdcfb329847e4f2c04bde7f7dd7fcad5a52d2f395a558",
                })
                .then(console.log);
          - language: python
            code: "from web3 import Web3, HTTPProvider\r\n\r\n#Replace with your Alchemy API key:\r\napiKey = \"demo\"\r\n\r\n# Initialize a Web3.py instance\r\nweb3 = Web3(Web3.HTTPProvider('https://eth-mainnet.alchemyapi.io/v2/'+apiKey))\r\n\r\n# Query the blockchain (replace example parameters)\r\ndata = web3.eth.call({\r\n\t\t'value': 0, \r\n\t\t'gas': 21736, \r\n\t\t'maxFeePerGas': 2000000000, \r\n\t\t'maxPriorityFeePerGas': 1000000000, \r\n\t\t'to': '0xc305c90',\r\n\t\t'data': '0x477a5c98'\r\n\t\t}) \r\n\r\n# Print the output to console\r\nprint(data)"
            name: web3.py
      responses:
        '200':
          description: Returns integer of the number of transactions in this block.
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/string_result_response
              examples:
                default:
                  summary: 'Sample Response'
                  value: '0x0000000000000000000000005555763613a12d8f3e73be831dff8598089d3dca'
  /{apiKey}/estimateGas:
    post:
      operationId: sdk-estimateGas
      summary: estimateGas
      description: Generates and returns an estimate of how much gas is necessary to allow the transaction to complete. The transaction will not be added to the blockchain.
      tags: ['SDK Core Endpoints']
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/eth_estimateGas_550
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy, parseEther } from "alchemy-sdk";

              // Optional config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };
              const alchemy = new Alchemy(settings);

              alchemy.core
                .estimateGas({
                  // Wrapped ETH address
                  to: "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
                  // `function deposit() payable`
                  data: "0xd0e30db0",
                  // 1 ether
                  value: parseEther("1.0"),
                })
                .then(console.log);
      responses:
        '200':
          description: Returns the amount of gas used.
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/string_result_response
  /{apiKey}/findContractDeployer:
    post:
      operationId: sdk-findContractDeployer
      summary: findContractDeployer
      description: Finds the address that deployed the provided contract and block number it was deployed in.
      tags: ['SDK Core Endpoints']
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/findContractDeployer
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              alchemy.core
                .findContractDeployer("0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d")
                .then(console.log);
      responses:
        '200':
          description: Returns the address of the contract deployer and the block number where it was deployed.
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/findContractDeployerResponse
  /{apiKey}/getAssetTransfers:
    post:
      tags: ['SDK Core Endpoints']
      operationId: sdk-getAssetTransfers
      summary: getAssetTransfers
      description: The Transfers API allows you to easily fetch historical transactions for any address across Ethereum and supported L2s including Polygon, Arbitrum, and Optimism.
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/alchemy_getAssetTransfers
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              import { Alchemy, Network } from "alchemy-sdk";

              const config = {
                apiKey: "demo",
                network: Network.ETH_MAINNET,
              };
              const alchemy = new Alchemy(config);

              // Address we want get NFT mints from
              const toAddress = "0x1E6E8695FAb3Eb382534915eA8d7Cc1D1994B152";

              const res = await alchemy.core.getAssetTransfers({
                fromBlock: "0x0",
                fromAddress: "0x0000000000000000000000000000000000000000",
                toAddress: toAddress,
                excludeZeroValue: true,
                category: ["erc721", "erc1155"],
              });

              console.log(res);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/alchemy_getAssetTransfers
  /{apiKey}/getBalance:
      post:
        operationId: sdk-getBalance
        summary: getBalance
        description: Returns the balance of the account of a given address.
        tags: ['SDK Core Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_getBalance
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core.getBalance("vitalik.eth", "latest").then(console.log);
        responses:
          '200':
            description: 'Returns hex value of the current ETH balance for the given address, measured in wei.'
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/string_result_response
  /{apiKey}/getBlock:
      post:
        tags: ['SDK Core Endpoints']
        operationId: sdk-getBlock
        summary: getBlock
        description: Returns the block from the network based on the provided block number or hash. 
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_getBlock
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core
                  .getBlock(
                    "0x92fc42b9642023f2ee2e88094df80ce87e15d91afa812fef383e6e5cd96e2ed3"
                  )
                  .then(console.log);
        responses:
          '200':
            description: 'Returns a block object with the following fields, or null when no block was found.'
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/eth_block
                examples:
                  default:
                    summary: 'Sample Response'
                    value: >
                      {
                        hash: '0x92fc42b9642023f2ee2e88094df80ce87e15d91afa812fef383e6e5cd96e2ed3',
                        parentHash: '0x6890edf8ad6900a5472c2a7ee3ef795f020ef6f907afb7f4ebf6a92d6aeb1804',
                        number: 15221026,
                        timestamp: 1658877717,
                        nonce: '0xd8c399035d6e6e8f',
                        difficulty: null,
                        gasLimit: BigNumber { _hex: '0x01ca35d2', _isBigNumber: true },
                        gasUsed: BigNumber { _hex: '0x01ca1ae1', _isBigNumber: true },
                        miner: '0x52bc44d5378309EE2abF1539BF71dE1b7d7bE3b5',
                        extraData: '0x6e616e6f706f6f6c2e6f7267',
                        transactions: [
                          '0xba4938ea41154427c8cb424ea89d9f150f139ed10065fe43ce11102dc82e1c37',
                          '0x98cc6b4b66453e184f65728fee265a726b030c5ddcfc1311a01ea5345c3959ab',
                          '0x2cbb4968cce66c73f2755fe7ef177981962afa7943f658b323e61850f31e4163'
                        ],
                        baseFeePerGas: BigNumber { _hex: '0x02aa2d1d80', _isBigNumber: true },
                        _difficulty: BigNumber { _hex: '0x2a31d8a2cf4dd7', _isBigNumber: true }
                      }
  /{apiKey}/getBlockNumber:
    post:
      tags: ['SDK Core Endpoints']
      operationId: sdk-getblocknumber
      summary: getBlockNumber
      description: Returns the number of the most recent block.
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };
              const alchemy = new Alchemy(settings);

              // Get the latest block number
              alchemy.core.getBlockNumber().then(console.log);
      responses:
        '200':
          description: Returns integer of the current block number the client is on.
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    description: Integer of the current block number the client is on.
                    properties:
                      result:
                        type: number
                        description: Integer of the current block number the client is on.
              examples:
                default:
                  summary: 'Sample Response'
                  value: '15534524'
  /{apiKey}/getBlockWithTransactions:
      post:
        tags: ['SDK Core Endpoints']
        operationId: sdk-getBlockWithTransactions
        summary: getBlockWithTransactions
        description: Returns the block from the network based on the provided block number or hash. Includes fully transactions from the block. 
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_getBlock
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core
                  .getBlockWithTransactions(
                    "0x92fc42b9642023f2ee2e88094df80ce87e15d91afa812fef383e6e5cd96e2ed3"
                  )
                  .then(console.log);
        responses:
          '200':
            description: 'Returns a block object with the following fields, or null when no block was found.'
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/eth_block
                examples:
                  default:
                    summary: 'Sample Response'
                    value: >
                      {
                        hash: '0x92fc42b9642023f2ee2e88094df80ce87e15d91afa812fef383e6e5cd96e2ed3',
                        parentHash: '0x6890edf8ad6900a5472c2a7ee3ef795f020ef6f907afb7f4ebf6a92d6aeb1804',
                        number: 15221026,
                        timestamp: 1658877717,
                        nonce: '0xd8c399035d6e6e8f',
                        difficulty: null,
                        gasLimit: BigNumber { _hex: '0x01ca35d2', _isBigNumber: true },
                        gasUsed: BigNumber { _hex: '0x01ca1ae1', _isBigNumber: true },
                        miner: '0x52bc44d5378309EE2abF1539BF71dE1b7d7bE3b5',
                        extraData: '0x6e616e6f706f6f6c2e6f7267',
                        transactions: [
                          {
                            hash: '0x58bbdd890cc828a70cf6d65f103d7723e945197b53da2c263ea6270a82fb2ccb',
                            type: 2,
                            accessList: [],
                            blockHash: '0x92fc42b9642023f2ee2e88094df80ce87e15d91afa812fef383e6e5cd96e2ed3',
                            blockNumber: 15221026,
                            transactionIndex: 57,
                            confirmations: 329310,
                            from: '0x7abE0cE388281d2aCF297Cb089caef3819b13448',
                            gasPrice: [BigNumber],
                            maxPriorityFeePerGas: [BigNumber],
                            maxFeePerGas: [BigNumber],
                            gasLimit: [BigNumber],
                            to: '0x7BA11217CCd0eD428924295BF7f13D50E75B68A4',
                            value: [BigNumber],
                            nonce: 310301,
                            data: '0x',
                            r: '0x79a3a0a0a9707c3c679e702b115562ce1bc5c8c761891baf05dfae2ddcc38599',
                            s: '0x488153c1dcdb9b03af4199070b67476fa8f24af865e0f448fb7f538b004b0991',
                            v: 1,
                            creates: null,
                            chainId: 1,
                            wait: [Function (anonymous)]
                          }
                        ],
                        baseFeePerGas: BigNumber { _hex: '0x02aa2d1d80', _isBigNumber: true },
                        _difficulty: BigNumber { _hex: '0x2a31d8a2cf4dd7', _isBigNumber: true }
                      }
  /{apiKey}/getCode:
      post:
        operationId: sdk-getCode
        summary: getCode
        description: Returns code at a given address.
        tags: ['SDK Core Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_getCode
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core.getCode("registrar.firefly.eth").then(console.log);
        responses:
          '200':
            description: Returns the code from the given address.
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/string_result_response
  /{apiKey}/feeData:
      post:
        operationId: sdk-feeData
        summary: feeData
        description: Returns the recommended fee data to use in a transaction. For an EIP-1559 transaction, the maxFeePerGas and maxPriorityFeePerGas should be used. For legacy transactions and networks which do not support EIP-1559, the gasPrice should be used.
        tags: ['SDK Core Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core.getFeeData().then(console.log);
        responses:
          '200':
            description: Returns integer of the current gas price in wei.
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/getFeeData
  /{apiKey}/getGasPrice:
      post:
        operationId: sdk-getGasPrice
        summary: getGasPrice
        description: Returns the current price per gas in wei.
        tags: ['SDK Core Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core.getGasPrice().then(console.log);
        responses:
          '200':
            description: Returns integer of the current gas price in wei.
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/string_result_response
  /{apiKey}/getLogs:
      post:
        tags: ['SDK Core Endpoints']
        operationId: sdk-getlogs
        summary: getLogs
        description: |
          Returns an array of all logs matching a given filter object. Returns logs which are records that denote/provide context on specific events within a smart contract, like a token transfer or a change of ownership for example.
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_getLogs
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                // Get logs for a certain address, with specified topics and blockHash
                alchemy.core
                  .getLogs({
                    address: "0xdAC17F958D2ee523a2206206994597C13D831ec7",
                    topics: [
                      "0xddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef",
                    ],
                    blockHash:
                      "0x49664d1de6b3915d7e6fa297ff4b3d1c5328b8ecf2ff0eefb912a4dc5f6ad4a0",
                  })
                  .then(console.log);
            - language: python
              name: Web3.py
              code: |
                # Installation Instructions: https://web3py.readthedocs.io/en/latest/quickstart.html#installation

                from web3 import Web3, HTTPProvider

                #Replace with your Alchemy API key:
                apiKey = "demo"

                # Initialize a Web3.py instance
                web3 = Web3(Web3.HTTPProvider('https://eth-mainnet.alchemyapi.io/v2/'+apiKey))

                # Query the blockchain (replace example parameters)
                logs = web3.eth.get_logs({
                  'fromBlock': 1000000, 
                  'toBlock': 1000100, 
                  'address': '0x6C8f2A1'
                  }) 

                # Print the output to console
                print(logs)
        responses:
          '200':
            description: 'Returns array of log objects, or an empty array if nothing has changed since last poll.'
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/eth_getLogs
  /{apiKey}/getStorageAt:
      post:
        operationId: sdk-getStorageAt
        summary: getStorageAt
        description: Returns the value from a storage position at a given address, or in other words, returns the state of the contract's storage, which may not be exposed via the contract's methods.
        tags: ['SDK Core Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_getStorageAt
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core.getStorageAt("registrar.firefly.eth", 0).then(console.log);
        responses:
          '200':
            description: Returns the value at this storage position.
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/string_result_response
  /{apiKey}/getTokenBalances:
    post:
      operationId: sdk-getTokenBalances
      summary: getTokenBalances
      description: Returns token balances for a specific address given a list of contracts. Alchemy Enhanced API.
      tags: ['SDK Core Endpoints']
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/alchemy_getTokenBalances
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };
              const alchemy = new Alchemy(settings);

              const vitalikAddress = "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045";
              const usdcContract = "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";

              // Print token balances of USDC in Vitalik's address
              alchemy.core.getTokenBalances(vitalikAddress, [usdcContract]).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/alchemy_getTokenBalances
  /{apiKey}/getTokenMetadata:
    post:
      operationId: sdk-getTokenMetadata
      summary: getTokenMetadata
      description: Returns metadata (name, symbol, decimals, logo) for a given token contract address.
      tags: ['SDK Core Endpoints']
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/alchemy_getTokenMetadata
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };
              const alchemy = new Alchemy(settings);

              // Print token metadata of USDC
              const usdcContract = "0xa0b86991c6218b36c1d19d4a2e9eb0ce3606eb48";
              alchemy.core.getTokenMetadata(usdcContract).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/alchemy_getTokenMetadata
  /{apiKey}/getTransactionCount:
      post:
        operationId: sdk-getTransactionCount
        summary: getTransactionCount
        description: Returns the number of transactions sent from an address.
        tags: ['SDK Core Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_getTransactionCount
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core.getTransactionCount("vitalik.eth").then(console.log);
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/number_result_response
  /{apiKey}/getTransactionReceipt:
      post:
        operationId: sdk-getTransactionReceipt
        summary: getTransactionReceipt
        description: Returns the receipt of a transaction by transaction hash.
        tags: ['SDK Core Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_getTransactionReceipt
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core
                  .getTransactionReceipt(
                    "0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b"
                  )
                  .then(console.log);
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/eth_getTransactionReceipt
  /{apiKey}/getTransactionReceipts:
    post:
      summary: getTransactionReceipts
      description: An Alchemy Enhanced API that gets all transaction receipts for a given block by number or block hash. Supported on all networks for Ethereum, Polygon, and Arbitrum.
      tags: ['SDK Core Endpoints']
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/alchemy_getTransactionReceipts_param
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };
              const alchemy = new Alchemy(settings);

              alchemy.core
                .getTransactionReceipts(
                  "0x18760312114f3fdf11f9d5846245995835aa59994d5fc4203faee52d2f7eaabe"
                )
                .then(console.log);
      responses:
        '200':
          description: A list of transaction receipts for each transaction in this block.
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/transaction_receipts
      operationId: sdk-getTransactionReceipts
  /{apiKey}/send:
      post:
        operationId: sdk-send
        summary: send
        description: Allows sending a raw message to the Alchemy backend.
        tags: ['SDK Core Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/sdk_send
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.core
                  .send("eth_getBlockByNumber", ["0xEDD023", false])
                  .then(console.log);
        responses:
          '200':
            description: Returns an object corresponding to the method called.
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/any_result_response

  # ////////////////////////////////////////////////////////////////////////////////
  # /////////////////////////////////// NFT ENDPOINTS //////////////////////////////
  # ////////////////////////////////////////////////////////////////////////////////

  '/{apiKey}/getNftsForOwner':
    get:
      summary: getNftsForOwner
      description: Gets all NFTs currently owned by a given address.
      tags: ['SDK NFT Endpoints']
      operationId: sdk-getNfts
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/owner'
        - $ref: '#/components/schemas/pageKey'
        - $ref: '#/components/schemas/pageSize'
        - $ref: '#/components/schemas/contractAddresses'
        - $ref: '#/components/schemas/omitMetadata'
        - $ref: '#/components/schemas/tokenUriTimeoutInMs'
        - $ref: '#/components/schemas/filters'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: demo, // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.

              };

              const alchemy = new Alchemy(settings);

              // Print all NFTs returned in the response:
              alchemy.nft.getNftsForOwner("0xshah.eth").then(console.log);
      responses:
        '200':
          description: 'Returns true if transaction was successfully cancelled, false if not.'
          content:
            application/json:
              schema:
                type: object
                properties:
                  ownedNfts:
                    type: array
                    items:
                      $ref: '#/components/schemas/ownedNFT'
                  pageKey:
                    type: string
                    description: 'String - UUID for pagination - returned if there are more NFTs to fetch. Max NFTs per page = 100.'
                  totalCount:
                    type: string
                    description: 'String - Total number of NFTs owned by the given address.'
                  blockHash:
                    type: string
                    description: 'String - The canonical head block hash of when your request was received'
              examples:
                byDefault:
                  $ref: 'nft/nfts.yaml#/components/schemas/byDefault_response'
                withoutMetadata:
                  $ref: 'nft/nfts.yaml#/components/schemas/withoutMetadata_response'
                withContractFiltering:
                  $ref: 'nft/nfts.yaml#/components/schemas/withContractFiltering_response'
                withPagination:
                  $ref: 'nft/nfts.yaml#/components/schemas/withPagination_response'
  '/{apiKey}/getNftMetadata':
    get:
      summary: getNftMetadata
      description: Gets the metadata associated with a given NFT.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
        - $ref: '#/components/schemas/tokenId'
        - $ref: '#/components/schemas/tokenType'
        - $ref: '#/components/schemas/tokenUriTimeoutInMs'
        - $ref: '#/components/schemas/refreshCache'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print NFT metadata returned in the response:
              alchemy.nft.getNftMetadata(
                "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                "1590"
              ).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ownedNFT'
      operationId: sdk-getNftMetadata
  '/{apiKey}/getContractMetadata':
    get:
      summary: getContractMetadata
      description: Queries NFT high-level collection/contract level information.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              alchemy.nft
                .getContractMetadata("0x61fce80d72363b731425c3a2a46a1a5fed9814b2")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  address:
                    type: string
                    description: 'String - Contract address for the queried NFT collection'
                  contractMetadata:
                    type: object
                    properties:
                      name:
                        type: string
                        description: 'String - NFT contract name.'
                      symbol:
                        type: string
                        description: 'String - NFT contract symbol abbreviation.'
                      totalSupply:
                        type: string
                        description: 'String - Total number of NFTs in a given NFT collection.'
                      tokenType:
                        $ref: '#/components/schemas/tokenType_response'   
      operationId: sdk-getContractMetadata
  '/{apiKey}/getNftsForContract':
    get:
      summary: getNftsForContract
      description: Gets all NFTs for a given NFT contract.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
        - $ref: '#/components/schemas/omitMetadata'
        - $ref: '#/components/schemas/startToken'
        - $ref: '#/components/schemas/limit-nfts'
        - $ref: '#/components/schemas/tokenUriTimeoutInMs'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT collection returned in the response:
              alchemy.nft
                .getNftsForContract("0x61fce80d72363b731425c3a2a46a1a5fed9814b2")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  nfts:
                    description: 'List of objects that represent NFTs stored under the queried contract address.'
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          $ref: '#/components/schemas/id'
                        tokenUri:
                          $ref: '#/components/schemas/tokenUri'
                        metadata:
                          $ref: '#/components/schemas/metadata'
                  nextToken:
                    type: string
                    description: 'String - An offset used for pagination'
      operationId: sdk-getNftsForContract
  '/{apiKey}/getOwnersForNft':
    get:
      summary: getOwnersForNft
      description: Get the owner(s) for a token.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
        - $ref: '#/components/schemas/tokenId'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT count returned in the response:
              alchemy.nft.getOwnersForNft("0x5180db8F5c931aaE63c74266b211F580155ecac8", "1590").then(
                console.log
              );
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  owners:
                    $ref: '#/components/schemas/owners'
  '/{apiKey}/getOwnersForContract':
    get:
      summary: getOwnersForContract
      description: Gets all owners for a given NFT contract.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
        - $ref: '#/components/schemas/withTokenBalances'
        - $ref: '#/components/schemas/block'
        - $ref: '#/components/schemas/pageKey'
          description: String - used for collections with >50,000 owners. `pageKey` field can be passed back as request parameter to get the next page of results.
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT count returned in the response:
              alchemy.nft
                .getOwnersForContract("0x61fce80d72363b731425c3a2a46a1a5fed9814b2")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/owners'
      operationId: sdk-getOwnersForContract
  '/{apiKey}/getSpamContracts':
    get:
      summary: getSpamContracts
      description: Returns a list of all spam contracts marked by Alchemy.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print all spam NFT contracts returned in the response:
              alchemy.nft.getSpamContracts().then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                description: A list of contract addresses earmarked as spam by Alchemy.
      operationId: sdk-getSpamContracts
  '/{apiKey}/isSpamContract':
    get:
      summary: isSpamContract
      description: Returns whether a contract is marked as spam or not by Alchemy.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print whether an NFT contract is spam
              alchemy.nft
                .isSpamContract("0x000440f08436a7b866d1ae42db5e0be801da722a")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: boolean
                description: <br/> True - if the queried contract is marked as spam. <br/> False - if the queried contract is considered valid.
      operationId: sdk-isSpamContract
  '/{apiKey}/refreshContract':
    get:
      summary: refreshContract
      description: Triggers metadata refresh for an entire NFT collection and refreshes stale metadata after a collection reveal/collection changes.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import {
                Network,
              } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print total NFT count returned in the response:
              alchemy.nft.refreshContract(
                "0x5180db8F5c931aaE63c74266b211F580155ecac8",
                "1590"
              ).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  contractAddresses:
                    $ref: '#/components/schemas/contractAddresses'
                  reingestionState:
                    type: string
                    enum:
                      - does_not_exist
                      - already_queried
                      - in_progress
                      - finished
                      - queued
                      - queue_failed
                    description: "<br/> String - The current state of the reingestion request. <br/>'does_not_exist' - The contract requested is not an NFT and does not contain proper metadata <br/>'already_queried' - Contract already queried <br/>'in_progress' - Ingestion in progress <br/>'finished' - Ingestion complete <br/>'queued' - Ingestion request placed into queue and awaiting execution. <br/>'queue_failed' - Queue job incomplete"
                  progress:
                    type: string
                    description: 'String - Percentage of tokens successfully refreshed.'
      operationId: sdk-refreshContract
  '/{apiKey}/getFloorPrice':
    get:
      summary: getFloorPrice
      description: Returns the floor prices of a NFT collection by marketplace.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              // Print the NFT floor price for a contract
              alchemy.nft
                .getFloorPrice("0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d")
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: object
                properties:
                  nftMarketplace:
                    type: object
                    description: 'Name of the NFT marketplace where the collection is listed. Current marketplaces supported -  OpenSea, LooksRare'
                    properties:
                      floorPrice:
                        type: number
                        description: 'Number - The floor price of the collection on the given marketplace.'
                      priceCurrency:
                        type: string
                        description: 'String - The currency in which the floor price is denominated. Typically, denominated in ETH'
                        enum:
                          - ETH
                      collectionUrl:
                        type: string
                        description: 'String - Link to the collection on the given marketplace.'
                      retrievedAt:
                        type: string
                        description: 'String - UTC timestamp of when the floor price was retrieved from the marketplace.'
                      error:
                        type: string
                        description: 'String - Returns an error if there was an error fetching floor prices from the given marketplace.'
      operationId: sdk-getFloorPrice
  '/{apiKey}/computeRarity':
    get:
      summary: computeRarity
      description: Computes the rarity of each attribute of an NFT.
      tags: ['SDK NFT Endpoints']
      parameters:
        - $ref: '#/components/schemas/apiKey'
        - $ref: '#/components/schemas/contractAddress'
        - $ref: '#/components/schemas/tokenId'
      x-readme:
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              // Setup: npm install alchemy-sdk
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional Config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              alchemy.nft
                .computeRarity("0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d", 145)
                .then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                description: 'NFT attributes and their associated prevalence.'
                items:
                  type: object
                  properties:
                    trait_type:
                      type: string
                      description: 'Name of the trait category, i.e. Hat, Color, Face, etc.'
                    value:
                      type: string
                      description: 'Value for the trait, i.e. White Cap, Blue, Angry, etc.'
                    prevalence:
                      type: number
                      description: 'Floating point value from 0 to 1 representing the prevalence of this value for this trait type.'
      operationId: sdk-computeRarity
  # '/{apiKey}/summarizeNftAttributes':
  #   get:
  #     summary: summarizeNftAttributes
  #     description: Generate a summary of attribute prevalence for an NFT collection.
  #     tags: ['SDK NFT Endpoints']
  #     parameters:
  #       - $ref: '#/components/schemas/apiKey'
  #       - $ref: '#/components/schemas/contractAddress'
  #     x-readme:
  #       samples-languages:
  #         - javascript
  #         - curl
  #         - python
  #         - go
  #     responses:
  #       '200':
  #         description: ''
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               description: 'Prevalence counts for each attribute within a collection.'
  #               properties:
  #                 totalSupply:
  #                   type: number
  #                   description: 'Total number of NFTs for the input contract.'
  #                 summmary:
  #                   type: object
  #                   description: 'Object mapping trait types to the prevalence of each trait within that type.'
  #                 contract:
  #                   $ref: '#/components/schemas/contractAddress'
  #     operationId: sdk-summarizeNftAttributes
  # '/{apiKey}/isHolderOfCollection':
  #   get:
  #     summary: isHolderOfCollection
  #     description: Checks whether a wallet holds a NFT in a given collection
  #     tags: ['SDK NFT Endpoints']
  #     parameters:
  #       - $ref: '#/components/schemas/apiKey'
  #       - $ref: '#/components/schemas/wallet'
  #       - $ref: '#/components/schemas/contractAddress'
  #     x-readme:
  #       samples-languages:
  #         - javascript
  #         - curl
  #         - python
  #         - go
  #     responses:
  #       '200':
  #         description: ''
  #         content:
  #           application/json:
  #             schema:
  #               type: object
  #               description: "Data related to a wallet's ownership of any token in an NFT collection."
  #               properties:
  #                 isHolderOfCollection:
  #                   type: boolean
  #                   description: 'Whether the given wallet owns any token in the given NFT collection.'
  #     operationId: sdk-isHolderOfCollection
  
  # ////////////////////////////////////////////////////////////////////////////////
  # /////////////////////////////////// TRANSACT ENDPOINTS /////////////////////////
  # ////////////////////////////////////////////////////////////////////////////////

  /{apiKey}/getTransaction:
      post:
        operationId: sdk-getTransaction
        summary: getTransaction
        description: 'Returns the information about a transaction requested by transaction hash or number. In the response object, `blockHash`, `blockNumber`, and `transactionIndex` are `null` when the transaction is pending.'
        tags: ['SDK Transact Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_getTransactionByHash
                example:
                  params:
                    [
                      '0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b',
                    ]
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                // Setup: npm install alchemy-sdk
                // Github: https://github.com/alchemyplatform/alchemy-sdk-js
                import { Network, Alchemy } from "alchemy-sdk";

                // Optional config object, but defaults to demo api-key and eth-mainnet.
                const settings = {
                  apiKey: "demo", // Replace with your Alchemy API Key.
                  network: Network.ETH_MAINNET, // Replace with your network.
                };
                const alchemy = new Alchemy(settings);

                alchemy.transact
                  .getTransaction(
                    "0x88df016429689c079f3b2f6ad39fa052532c56795b733da78a91ebe6a713944b"
                  )
                  .then(console.log);
        responses:
          '200':
            description: ''
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/eth_getTransactionByHash
  /{apiKey}/sendTransaction:
      post:
        operationId: sdk-sendTransaction
        summary: sendTransaction
        description: Creates a new message call transaction or a contract creation for signed transactions.
        tags: ['SDK Transact Endpoints']
        parameters:
          - name: apiKey
            in: path
            schema:
              type: string
              default: docs-demo
              description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
            required: true
        requestBody:
          content:
            application/json:
              schema:
                $ref: sdk_body.yaml#/eth_sendRawTransaction
        x-readme:
          explorer-enabled: false
          samples-languages:
            - javascript
          code-samples:
            - language: javascript
              name: Alchemy SDK
              code: |
                import { Network, Alchemy, Wallet, Utils } from "alchemy-sdk";
                import dotenv from "dotenv";
                dotenv.config();

                const { API_KEY, PRIVATE_KEY } = process.env;

                const settings = {
                  apiKey: API_KEY,
                  network: Network.ETH_GOERLI, // Replace with your network.
                };

                const alchemy = new Alchemy(settings);
                const wallet = new Wallet(PRIVATE_KEY);

                const transaction = {
                  to: "0xa238b6008Bc2FBd9E386A5d4784511980cE504Cd",
                  value: Utils.parseEther("0.001"),
                  gasLimit: "21000",
                  maxPriorityFeePerGas: Utils.parseUnits("5", "gwei"),
                  maxFeePerGas: Utils.parseUnits("20", "gwei"),
                  nonce: await alchemy.core.getTransactionCount(wallet.getAddress()),
                  type: 2,
                  chainId: 5, // Corresponds to ETH_GOERLI
                };

                const rawTransaction = await wallet.signTransaction(transaction);
                await alchemy.transact.sendTransaction(rawTransaction);
        responses:
          '200':
            description: 'Returns the pending transaction object.'
            content:
              application/json:
                schema:
                  $ref: sdk_responses.yaml#/sendTransaction
  /{apiKey}/sendPrivateTransaction:
    post:
      summary: sendPrivateTransaction
      operationId: sdk-sendPrivateTransaction
      description: Send a single private transaction through Flashbots. Private transactions are sent directly to miners and not included in the public mempool.
      tags: ['SDK Transact Endpoints']
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/eth_sendPrivateTransaction
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              import { Network, Alchemy, Wallet, Utils } from "alchemy-sdk";
              import dotenv from "dotenv";
              dotenv.config();

              const { API_KEY, PRIVATE_KEY } = process.env;

              const settings = {
                apiKey: API_KEY,
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);
              const wallet = new Wallet(PRIVATE_KEY);

              const transaction = {
                to: "0xa238b6008Bc2FBd9E386A5d4784511980cE504Cd",
                value: Utils.parseEther("0.001"),
                gasLimit: "21000",
                maxPriorityFeePerGas: Utils.parseUnits("5", "gwei"),
                maxFeePerGas: Utils.parseUnits("20", "gwei"),
                nonce: await alchemy.core.getTransactionCount(wallet.getAddress()),
                type: 2,
                chainId: 1, // Corresponds to ETH_MAINNET
              };

              const rawTransaction = await wallet.signTransaction(transaction);
              alchemy.transact.sendPrivateTransaction(rawTransaction).then(console.log);
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/string_result_response
  /{apiKey}/cancelPrivateTransaction:
    post:
      operationId: sdk-cancelPrivateTransaction
      summary: cancelPrivateTransaction
      description: Request to cancel private transactions on Ethereum that are sent via eth_sendPrivateTransaction.
      tags: ['SDK Transact Endpoints']
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/eth_cancelPrivateTransaction
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };
              const alchemy = new Alchemy(settings);

              alchemy.transact
                .cancelPrivateTransaction(
                  "0x2e8dff1ae477808ec0682c27fbdd250a2e628090fe4e901e644c942628113b37"
                )
                .then(console.log);
      responses:
        '200':
          description: 'Returns true if transaction was successfully cancelled, false if not.'
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/eth_cancelPrivateTransaction
  /{apiKey}/waitForTransaction:
    post:
      operationId: sdk-waitForTransaction
      summary: waitForTransaction
      description: Returns a promise which will not resolve until specified transaction hash is mined. If confirmations is 0, this method is non-blocking and if the transaction has not been mined returns null. Otherwise, this method will block until the transaction has confirmed blocks mined on top of the block in which it was mined.
      tags: ['SDK Transact Endpoints']
      parameters:
        - name: apiKey
          in: path
          schema:
            type: string
            default: docs-demo
            description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
          required: true
      requestBody:
        content:
          application/json:
            schema:
              $ref: sdk_body.yaml#/waitForTransaction
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Network, Alchemy } from "alchemy-sdk";

              // Optional config object, but defaults to demo api-key and eth-mainnet.
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };
              const alchemy = new Alchemy(settings);

              alchemy.transact
                .cancelPrivateTransaction(
                  "0x2e8dff1ae477808ec0682c27fbdd250a2e628090fe4e901e644c942628113b37"
                )
                .then(console.log);
      responses:
        '200':
          description: Returns a promise of a transaction receipt which will not resolve until specified transaction hash is mined.
          content:
            application/json:
              schema:
                $ref: sdk_responses.yaml#/transaction_receipt


  # ////////////////////////////////////////////////////////////////////////////////
  # /////////////////////////////////// NOTIFY ENDPOINTS ///////////////////////////
  # ////////////////////////////////////////////////////////////////////////////////


  /get-all-webhooks:
    get:
      summary: getAllWebhooks
      description: This endpoint allows you to get all webhooks from every app on your team.
      tags: ['SDK Notify Endpoints']
      parameters:
        - $ref: '#/components/schemas/X-Alchemy-Token'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Alchemy, Network } from "alchemy-sdk";

              // authToken is required to use Notify APIs. Found on the top right corner of
              // https://dashboard.alchemy.com/notify.
              const settings = {
                authToken: "your-notify-auth-token",
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              alchemy.notify.getAllWebhooks().then(console.log);
      responses:
        '200':
          description: Returns list of webhook objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/webhook_object_response'
      operationId: sdk-get-all-webhooks
  /get-addresses-webhooks:
    get:
      summary: getAddresses
      description: Paginated endpoint to list all of the addresses a given Address Activity webhook is subscribed to.
      tags: ['SDK Notify Endpoints']
      parameters:
        - $ref: '#/components/schemas/X-Alchemy-Token'
        - $ref: '#/components/schemas/webhook_id'
        - $ref: '#/components/schemas/getWebhookListOptions'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Alchemy, Network } from "alchemy-sdk";

              // authToken is required to use Notify APIs. Found on the top right corner of
              // https://dashboard.alchemy.com/notify.
              const settings = {
                authToken: "your-notify-auth-token",
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);
              const hooks = await alchemy.notify.getAllWebhooks();

              const addressesById = await alchemy.notify.getAddresses("wh_qv16bt12wbj9kax4", {
                limit: 3,
              });
              const addressesByWebhook = await alchemy.notify.getAddresses(
                hooks.webhooks[3],
                { limit: 3, pageKey: 1 }
              );
      responses:
        '200':
          description: 'List of addresses and pagination info.'
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/webhook_addresses_response'
      operationId: sdk-get-addresses-webhooks

  /get-nft-filters-webhooks:
    get:
      summary: getNftFilters
      description: Paginated endpoint to list all of the NFT filter objects a given webhook is subscribed to.
      tags: ['SDK Notify Endpoints']
      parameters:
        - $ref: '#/components/schemas/X-Alchemy-Token'
        - $ref: '#/components/schemas/webhook_id'
        - $ref: '#/components/schemas/getWebhookListOptions'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Alchemy, Network } from "alchemy-sdk";

              // authToken is required to use Notify APIs. Found on the top right corner of
              // https://dashboard.alchemy.com/notify.
              const settings = {
                authToken: "your-notify-auth-token",
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);
              const hooks = await alchemy.notify.getAllWebhooks();

              const nftsById = await alchemy.notify.getNftFilters("wh_zyhqo5im08n6ougk", {
                limit: 3,
                pageKey: 1,
              });

              const nftsByWebhook = await alchemy.notify.getNftFilters(hooks.webhooks[1]);
      responses:
        '200':
          description: Returns a list of nft filter objects.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/webhook_nft_filters_response'
      operationId: sdk-get-nft-filters-webhooks

  /update-webhook:
    put:
      summary: updateWebhook
      description: 'Allows you to update the state of an existing webhook. Input parameters is a webhook ID or object, followed by exactly one of the Update objects listed below.'
      tags: ['SDK Notify Endpoints']
      parameters:
        - $ref: '#/components/schemas/X-Alchemy-Token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/update_webhook_endpoint'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Alchemy, Network } from "alchemy-sdk";

              // authToken is required to use Notify APIs. Found on the top right corner of
              // https://dashboard.alchemy.com/notify.
              const settings = {
                authToken: "your-notify-auth-token",
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              await alchemy.notify.updateWebhook("wh_qv16bt12wbj9kax4", { isActive: false });

              // Updating Address Activity Webhook: add/remove addresses
              await alchemy.notify.updateWebhook("wh_qv16bt12wbj9kax4", {
                addAddresses: [
                  "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96010",
                  "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96011",
                ],
                removeAddresses: ["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96043"],
              });

              // Updating Address Activity Webhook: replace all addresses
              await alchemy.notify.updateWebhook("wh_qv16bt12wbj9kax4", {
                newAddresses: ["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96010"],
              });

              // Updating NFT Filter Webhook: add/remove filters
              await alchemy.notify.updateWebhook("wh_zyhqo5im08n6ougk", {
                addFilters: [
                  {
                    contractAddress: "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                    tokenId: "101",
                  },
                ],
                removeFilters: [
                  {
                    contractAddress: "0xbc4ca0eda7647a8ab7c2061c2e118a18a936f13d",
                    tokenId: "24",
                  },
                ],
              });
      responses:
        '200':
          description: 'Returns undefined.'
      operationId: sdk-update-webhook
      
  /create-webhook:
    post:
      summary: createWebhook
      description: 'This endpoint allows you to create a webhook.'
      tags: ['SDK Notify Endpoints']
      parameters:
        - $ref: '#/components/schemas/X-Alchemy-Token'
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/create_webhook'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Alchemy, Network, WebhookType } from "alchemy-sdk";

              // authToken is required to use Notify APIs. Found on the top right corner of
              // https://dashboard.alchemy.com/notify.
              const settings = {
                authToken: "your-notify-auth-token",
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              const minedTxWebhook = await alchemy.notify.createWebhook(
                "https://webhook.site/your-webhook-url",
                WebhookType.MINED_TRANSACTION,
                { appId: "wq9fgv022aff81pg" }
              );

              const droppedTxWebhook = await alchemy.notify.createWebhook(
                "https://webhook.site/your-webhook-url",
                WebhookType.DROPPED_TRANSACTION,
                { appId: "wq9fgv022aff81pg" }
              );

              const addressActivityWebhook = await alchemy.notify.createWebhook(
                "https://webhook.site/your-webhook-url",
                WebhookType.ADDRESS_ACTIVITY,
                {
                  addresses: ["0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96010"],
                  network: Network.ETH_MAINNET,
                }
              );

              const nftActivityWebhook = await alchemy.notify.createWebhook(
                "https://webhook.site/your-webhook-url",
                WebhookType.NFT_ACTIVITY,
                {
                  filters: [
                    {
                      contractAddress: "0x88b48f654c30e99bc2e4a1559b4dcf1ad93fa656",
                      tokenId: "234",
                    },
                  ],
                  network: Network.ETH_MAINNET,
                }
              );
      responses:
        '200':
          description: 'Returns webhook creation data.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/create_webhook_response'
      operationId: sdk-create-webhook

  /delete-webhook:
    delete:
      summary: deleteWebhook
      description: 'Allows you to delete a webhook.'
      tags: ['SDK Notify Endpoints']
      parameters:
        - $ref: '#/components/schemas/X-Alchemy-Token'
        - $ref: '#/components/schemas/webhook_id'
      x-readme:
        explorer-enabled: false
        samples-languages:
          - javascript
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Setup: npm install alchemy-sdk
              // Github: https://github.com/alchemyplatform/alchemy-sdk-js
              import { Alchemy, Network, WebhookType } from "alchemy-sdk";

              // authToken is required to use Notify APIs. Found on the top right corner of
              // https://dashboard.alchemy.com/notify.
              const settings = {
                authToken: "your-notify-auth-token",
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              const alchemy = new Alchemy(settings);

              const minedTxWebhook = await alchemy.notify.createWebhook(
                "https://webhook.site/your-webhook-url",
                WebhookType.MINED_TRANSACTION,
                { appId: "wq9fgv022aff81pg" }
              );

              await alchemy.notify.deleteWebhook("wh_qv16bt12wbj9kax4");
              await alchemy.notify.deleteWebhook(minedTxWebhook);
      responses:
        '200':
          description: 'Returns nothing.'
      operationId: sdk-delete-webhook

components:
  schemas:
    apiKey:
      name: apiKey
      in: path
      schema:
        type: string
        default: docs-demo
        description: For higher throughput, **[create your own API key](https://alchemy.com/?a=docs-demo)**
      required: true
    owner:
      name: owner
      description: String - Address for NFT owner (can be in ENS format!).
      schema:
        type: string
      in: query
      required: true
    wallet:
      name: wallet
      description: String - Wallet address to check for collection ownership.
      schema:
        type: string
      in: query
      required: true
    pageKey:
      name: pageKey
      description: 'String - Cursor key for pagination. If more results are available, a pageKey will be returned in the response. Pass back that pageKey as a param to fetch the next 100 NFTs.'
      schema:
        type: string
      in: query
    pageSize:
      name: pageSize
      description: 'String - Number of NFTs to be returned per page. Defaults to 100. Max is 100. NOTE: Only supported on Ethereum Mainnet and Goerli, Polygon Mainnet and Mumbai, Arbitrum Mainnet and Goerli, and Optimism Mainnet and Goerli.'
      schema:
        type: integer
      in: query
    contractAddresses:
      name: contractAddresses[]
      description: Array of contract addresses to filter the responses with. Max limit 20 contracts.
      schema:
        type: array
        items:
          type: string
      in: query
    omitMetadata:
      name: omitMetadata
      description: 'Boolean - if set to `false`, returns NFT metadata. Setting this to true will reduce payload size and may result in a faster API call. Defaults to `false`.'
      schema:
        type: boolean
        default: false
      in: query
    filters:
      name: filters[]
      description: |-
        Array of filters (as ENUMS) that will be applied to the query. NFTs that match one or more of these filters will be excluded from the response. Filter Options:
          - SPAM: NFTs that have been classified as spam. Spam classification has a wide range of criteria that includes but is not limited to emitting fake events and copying other well-known NFTs.
          - AIRDROPS: NFTs that have were airdropped to the user. Airdrops are defined as NFTs that were minted to a user address in a transaction sent by a different address. NOTE: this filter is currently supported on Ethereum Mainnet and Goerli only.
      schema:
        type: array
        items:
          type: string
          enum:
            - SPAM
            - AIRDROPS
      in: query
    contractAddress:
      name: contractAddress
      description: String - Contract address for the NFT collection (ERC721 and ERC1155 supported).
      in: query
      schema:
        type: string
      required: true
    tokenId:
      name: tokenId
      description: String - The ID of the token. Can be in hex or decimal format.
      in: query
      schema:
        type: string
      required: true
    tokenType:
      name: tokenType
      description: String - 'ERC721' or 'ERC1155'; specifies type of token to query for. API requests will perform faster if this is specified.
      in: query
      schema:
        type: string
    startToken:
      name: startToken
      description: 'String - An offset used for pagination. Can be a hex string, or a decimal. Set to `nextToken` returned in the response to access the next page.'
      in: query
      schema:
        type: string
    limit-nfts:
      name: limit
      description: Integer - Sets the total number of NFTs returned in the response. Defaults to 100.
      in: query
      schema:
        type: integer
    tokenUriTimeoutInMs:
      name: tokenUriTimeoutInMs
      description: 'No set timeout by default - When metadata is requested, this parameter is the timeout (in milliseconds) for the website hosting the metadata to respond. If you want to _only_ access the cache and not live fetch any metadata for cache misses then set this value to 0.'
      in: query
      schema:
        type: integer
    withTokenBalances:
      name: withTokenBalances
      description: Boolean - If set to `true` the query will include the token balances per token id for each owner. `false` by default.
      in: query
      schema:
        type: boolean
        default: false
    refreshCache:
      name: refreshCache
      description: Defaults to false for faster response times.  If true will refresh metadata for given token. If false will check the cache and use it or refresh if cache doesn't exist.
      in: query
      schema:
        type: boolean
        default: false
    block:
      name: block
      description: String - The point in time or block number (in hex or decimal) to fetch collection ownership information for.
      in: query
      schema:
        type: string
      required: false

    # ===== Response Objects ========
    tokenType_response:
      type: string
      description: "String - 'ERC721' or 'ERC1155'"
    raw:
      type: string
      description: "String - Uri representing the location of the NFT's original metadata blob. This is a backup for you to parse when the metadata field is not automatically populated."
    gateway:
      type: string
      description: 'String - Public gateway uri for the raw uri above.'
    id:
      type: object
      properties:
        tokenId:
          $ref: '#/components/schemas/tokenId'
        tokenMetadata:
          type: object
          properties:
            tokenType:
              $ref: '#/components/schemas/tokenType_response'
    tokenUri:
      type: object
      properties:
        raw:
          $ref: '#/components/schemas/raw'
        gateway:
          $ref: '#/components/schemas/gateway'
    metadata:
      type: object
      description: 'String - Relevant metadata for NFT contract. This is useful for viewing image url, traits, etc. without having to follow the metadata url in tokenUri to parse manually.'
      properties:
        image:
          type: string
          description: 'String - URL to the NFT asset image. Can be standard URLs pointing to images on conventional servers, IPFS, or Arweave. Most types of images (SVGs, PNGs, JPEGs, etc.) are supported by NFT marketplaces.'
        external_url:
          type: string
          description: 'String - The image URL that appears alongside the asset image on NFT platforms.'
        background_color:
          type: string
          description: 'String - Background color of the NFT item. Usually must be defined as a six-character hexadecimal.'
        name:
          type: string
          description: 'String - Name of the NFT asset.'
        description:
          type: string
          description: 'String - Human-readable description of the NFT asset. (Markdown is supported/rendered on OpenSea and other NFT platforms)'
        attributes:
          type: array
          items:
            type: object
            properties:
              value:
                type: string
              trait_type:
                type: string
          description: 'Object - Traits/attributes/characteristics for each NFT asset.'
    ownedNFT:
      type: object
      properties:
        contract:
          description: 'Object - Contract for returned NFT'
          type: object
          properties:
            address:
              type: string
              description: 'String - Address of NFT contract.'
        id:
          $ref: '#/components/schemas/id'
        balance:
          type: string
          description: 'String - Token balance'
        title:
          type: string
          description: 'String - Name of the NFT asset.'
        description:
          type: string
          description: 'String - Brief human-readable description'
        tokenUri:
          $ref: '#/components/schemas/tokenUri'
        media:
          type: object
          properties:
            raw:
              $ref: '#/components/schemas/raw'
            gateway:
              $ref: '#/components/schemas/gateway'
            thumbnail:
              type: string
              description: URL for a resized thumbnail of the NFT media asset.
            format:
              type: string
              description: The media format (jpg, gif, png, etc.) of the gateway and thumbnail assets.
            bytes:
              type: integer
              description: The size of the media asset in bytes.
        metadata:
          $ref: '#/components/schemas/metadata'
        timeLastUpdated:
          type: string
          description: 'String - ISO timestamp of the last cache refresh for the information returned in the metadata field.'
        error:
          type: string
          description: 'String - A string describing a particular reason that we were unable to fetch complete metadata for the NFT.'      
    owners:
      type: object
      properties:
        ownerAddresses:
          description: 'List of all addresses that own one of the NFTs from the queried contract address.'
          type: array
          items:
            type: string
    X-Alchemy-Token:
      name: X-Alchemy-Token
      in: header
      schema:
        type: string
      description: 'Auth Token found on the top right corner of https://dashboard.alchemy.com/notify. Required to use Notify APIs.'
      example: 'your-notify-auth-token'
    webhook_id:
      name: webhook
      schema:
        type: string
      description: |     
        One of the following:
          1. String - Webhook ID associated with the webhook
          2. Webhook - Javascript object representing the webhook returned in getAllWebhooks()
      in: query
      required: true
    getWebhookListOptions: 
      name: options
      in: query
      schema: 
        type: object
        properties:
          limit:
            schema:
              type: integer
              default: 100
            description: 'Number of items per page.'
          pageKey: 
            schema: 
              type: integer
              default: '1'
            description: 'Page cursor for the next page.'
    limit:
      name: limit
      schema:
        type: integer
        default: 100
      description: 'Number of items per page.'
      in: query
    after:
      name: after
      schema:
        type: string
        default: '1'
      description: 'Page cursor for the next page.'
      in: query
    create_webhook:
      type: object
      properties:
        url:
          type: string
          description: 'URL where requests are sent'
        type:
          $ref: '#/components/schemas/webhook_type'
        TransactionWebhookParams: 
          type: object
          description: |
            Used for Mined / Dropped Transaction Webhooks. 
            Include only one of these Params objects as the third parameter.
          properties: 
            appId: 
              type: string
              description: The app id of the project to create the mined / dropped transaction webhook on.
        AddressWebhookParams: 
          type: object
          description: |
            Used for Address Activity Webhooks. 
            Include only one of these Params objects as the third parameter.
          properties: 
            addresses: 
              type: array
              description: Array of addresses the webhook should track activity for. 
              items: 
                type: string
            network: 
              description: Optional network to create the webhook on. If omitted, the webhook will be created on network of the app provided in the api key config.
              $ref: '#/components/schemas/network'
        NftWebhookParams: 
          type: object
          description: |
            Used for NFT Filter Webhooks. 
            Include only one of these Params objects as the third parameter.
          properties: 
            addresses: 
              type: array
              description: Array of NFT filters the webhook should track.
              items: 
                $ref: '#/components/schemas/nft_filter'
            network: 
              description: Optional network to create the webhook on. If omitted, the webhook will be created on network of the app provided in the api key config.
              $ref: '#/components/schemas/network'

    update_webhook_addresses:
      type: object
      required:
        - webhook_id
      properties:
        webhook_id:
          type: string
          description: 'ID of the address activity webhook'
        addresses_to_add:
          type: array
          description: 'List of addresses to add, use [] if none.'
          items:
            type: string
        addresses_to_remove:
          type: array
          description: 'List of addresses to remove, use [] if none.'
          items:
            type: string
    update_webhook_nft_filters:
      type: object
      required:
        - webhook_id
      properties:
        webhook_id:
          type: string
          description: 'ID of the address activity webhook'
        nft_filters_to_add:
          type: array
          description: 'List of nft filters to add, use [] if none.'
          items:
            $ref: '#/components/schemas/nft_filter'
        nft_filters_to_remove:
          type: array
          description: 'List of addresses to remove, use [] if none.'
          items:
            $ref: '#/components/schemas/nft_filter'
    replace_webhook_addresses:
      type: object
      properties:
        webhook_id:
          type: string
          description: 'ID of the address activity webhook.'
        addresses:
          type: array
          description: 'New list of addresses to track. This replaces any existing addresses.'
          items:
            type: string


    update_webhook_endpoint:
      type: object
      description: A Webhook ID, followed by one of the following objects
      properties:
        webhook:
          $ref: '#/components/schemas/webhook_id'
        WebhookStatusUpdate: 
          type: object
          description: Include only one of these Update objects as the second parameter.
          properties: 
            isActive: 
              type: boolean
              description: "Sets the webhook to be active or inactive."
        WebhookAddressUpdate: 
          type: object
          description: Include only one of these Update objects as the second parameter.
          properties: 
            addAddresses: 
              type: array
              description: "Array of addresses to additionally track."
              items: 
                type: string
            removeAddresses: 
              type: array
              description: "Array of existing addresses to remove"
              items: 
                type: string
        WebhookAddressOverride: 
          type: object
          description: Include only one of these Update objects as the second parameter.
          properties: 
            newAddresses: 
              type: array
              description: "New addresses to track. Existing addresses will be removed."
              items: 
                type: string
        WebhookNftFilterUpdate: 
          type: object
          description: Include only one of these Update objects as the second parameter.
          properties: 
            addFilters: 
              type: array
              description: "Array of NFT filters to additionally track."
              items: 
                $ref: '#/components/schemas/nft_filter'
            removeFilters: 
              type: array
              description: "Array of existing filters to remove."
              items: 
                $ref: '#/components/schemas/nft_filter'
    webhook_object_response:
      type: object
      properties:
        webhooks:
          type: array
          description: 'List of webhooks for your team.'
          items:
            $ref: '#/components/schemas/return_webhook_data'
        totalCount: 
          type: number
          description: 'Number of webhooks returned'
    return_webhook_data:
      type: object
      properties:
        id:
          type: string
          description: 'Unique ID for given webhook.'
        network:
          $ref: '#/components/schemas/network'
        type:
          $ref: '#/components/schemas/webhook_type'
        url:
          type: string
          description: 'URL endpoint where webhook is sent'
        isActive:
          type: boolean
          description: '(boolean) - true if webhook is active, false if not active.'
        timeCreated:
          type: string
          description: 'Timestamp webhook was created.'
        signingKey:
          type: string
          description: 'Signing key for given webhook.'
        version:
          type: string
          description: Webhook version (v1 or v2)
        appId: 
          type: string
          description: Only exists for Mined / Dropped Transactions. The App ID of the project the webhook is connected to.
    gas_price_low:
      type: integer
      description: 'Low end of gas price threshold, null if not gas price webhook.'
    gas_price_high:
      type: integer
      description: 'High end of gas price threshold, null if not gas price webhook.'
    gas_price_type:
      type: integer
      description: 'Metric used for gas price threshold, null if not gas price webhook'
    version:
      type: string
      description: 'V1 or V2'
      enum:
        - V1
        - V2
    webhook_addresses_response:
      type: object
      properties:
        addresses:
          type: array
          description: 'List of addresses associated with given webhook.'
          items:
            type: string
        totalCount: 
          type: integer
          description: 'Total number of addresses.'
        pageKey:
          type: string
          description: 'String - Cursor key for pagination. If more results are available, a pageKey will be returned in the response.'

    create_webhook_response:
      $ref: '#/components/schemas/return_webhook_data'

    nft_filter: 
      type: object
      properties:
        contractAddress:
          type: string
          description: 'Contract address of the NFT in the NFT filter.'
        tokenId: 
          type: string
          description: 'Token ID of the NFT in the NFT Filter. 0x-prefixed hexidecimal or decimal string.'

    webhook_nft_filters_response:
      type: object
      properties:
        addresses:
          type: array
          description: 'List of NFT filters associated with given webhook.'
          items:
            $ref: '#/components/schemas/nft_filter'
        totalCount: 
          type: integer
          description: 'Total number of addresses.'
        pageKey:
          type: string
          description: 'String - Cursor key for pagination. If more results are available, a pageKey will be returned in the response.'
    network:
      type: string
      description: 'Network of webhook'
      enum:
        - ETH_MAINNET
        - ETH_GOERLI
        - ETH_ROPSTEN
        - ETH_RINKEBY
        - ETH_KOVAN
        - MATIC_MAINNET
        - MATIC_MUMBAI
        - ARB_MAINNET
        - ARB_RINKEBY
        - OPT_MAINNET
        - OPT_KOVAN
    webhook_type:
      type: string
      description: 'Type of webhook.'
      enum:
        - MINED_TRANSACTION
        - DROPPED_TRANSACTION
        - ADDRESS_ACTIVITY
        - NFT_ACTIVITY
