openapi: 3.1.0
info:
  title: debug_traceCall
  version: '1.0'
servers:
  - url: https://{network}.g.alchemy.com/v2
    variables:
      network:
        enum:
          - eth-mainnet
          - eth-goerli
          - polygon-mainnet
          - polygon-mumbai
          - arb-mainnet
          - arb-goerli
          - opt-mainnet
          - opt-goerli
        default: eth-mainnet
paths:
  /{apiKey}:
    post:
      summary: debug_traceCall
      description: Runs an eth_call within the context of the given block execution using the final state of parent block as the base.
      operationId: debug-tracecall
      parameters:
        - $ref: ../components/parameters.yaml#/ApiKey
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                id:
                  $ref: ./schemas.yaml#/Id
                jsonrpc:
                  $ref: ./schemas.yaml#/JsonRpc
                method:
                  $ref: ./schemas.yaml#/Method
                  default: debug_traceCall
              params:
                type: array
                minItems: 1
                maxItems: 1
                description: |
                  1. `object` - Transaction Object
                  2. `string` - Block Identifier: Block hash, block number (in hex), or block tag
                  3. `tracer` - Object: Currently supports `callTracer` and `prestateTracer` (see above for definitions).
                items:
                  anyOf:
                    - $ref: '../components/schemas.yaml#/TxObject'
                      title: Transaction object
                    - type: string
                      title: Block identifier
                      description: |
                        String - One of the following options:
                          1. **block hash**
                          2. **block number** (in hex)
                          3. **block tag** (one of the following):
                            * `pending` - A sample next block built by the client on top of latest and containing the set of transactions usually taken from local mempool. Intuitively, you can think of these as blocks that have not been mined yet.
                            * `latest` - The most recent block in the canonical chain observed by the client, this block may be re-orged out of the canonical chain even under healthy/normal conditions.
                            * `safe` - The most recent crypto-economically secure block, cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is “unlikely” to be re-orged.
                            * `finalized` - The most recent crypto-economically secure block, that has been accepted by >2/3 of validators. Cannot be re-orged outside of manual intervention driven by community coordination. Intuitively, this block is very unlikely to be re-orged.
                            * `earliest` - The lowest numbered block the client has available. Intuitively, you can think of this as the first block created.
                      default: finalized
                    - type: object
                      title: Tracer
                      properties:
                        tracer:
                          $ref: './components.yaml#/Tracer'
                        tracerConfig:
                          $ref: './components.yaml#/TracerConfig'
      responses:
        '200':
          description: 'Returns - Array of block traces'
          content:
            application/json:
              schema:
                $ref: ../evm_responses.yaml#/debug_traceCall
      x-readme:
        explorer-enabled: false
        samples-languages:
          - curl
          - javascript
          - python
        code-samples:
          - language: javascript
            name: Alchemy SDK
            code: |
              // Importing the Alchemy SDK
              const { Network, Alchemy } = require("alchemy-sdk");

              // Configuring the Alchemy SDK
              const settings = {
                apiKey: "demo", // Replace with your Alchemy API Key.
                network: Network.ETH_MAINNET, // Replace with your network.
              };

              // Creating a new Alchemy instance to interact with the Alchemy APIs
              const alchemy = new Alchemy(settings);

              // Creating a function to run the code
              async function main() {
                // block number or hash in context of which the call is made
                let blockHashOrNumber = 15530600;

                // Using the traceCall method to get the traces for the call
                let callTrace = await alchemy.debug.traceCall(
                  {
                    to: "0xd46e8dd67c5d32be8058bb8eb970870f07244567",
                  },
                  blockHashOrNumber,
                  { tracer: "callTracer" }
                );

                // Logging the traces of the call
                console.log(callTrace);
              }

              // Calling the main function to run the code
              main();
          - language: shell
            code: |
              curl https://eth-mainnet.g.alchemy.com/v2/demo \
              -X POST \
              -H "Content-Type: application/json" \
              --data '{"method":"debug_traceCall","params":[{"from":null,"to":"0x6b175474e89094c44da98b954eedeac495271d0f","data":"0x70a082310000000000000000000000006E0d01A76C3Cf4288372a29124A26D4353EE51BE"}, "latest"],"id":1,"jsonrpc":"2.0"}'
            name: cURL
